<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title/>
  <subtitle/>
  <id>http://blog.segiddins.me/</id>
  <link href="http://blog.segiddins.me/"/>
  <link href="http://blog.segiddins.me/rss" rel="self"/>
  <updated>2020-12-23T09:45:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>What I Value</title>
    <link rel="alternate" href="http://blog.segiddins.me/2020/12/23/what-i-value/"/>
    <id>http://blog.segiddins.me/2020/12/23/what-i-value/</id>
    <published>2020-12-23T09:45:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve spent a lot of this year thinking. I think most people have.&lt;/p&gt;

&lt;p&gt;I was sending some random tweets to a friend last week, and I captioned the exchange by saying &amp;ldquo;&amp;hellip; I think this year has made me, and there’s no other way to put it, insufferably Jewish&amp;rdquo;. (Now, I know I’ve always been insufferable. I was merely commenting on the nature of the insufferability these days). He responded by first assuring me, &amp;ldquo;that’s not a bad thing&amp;rdquo; (which is how you can tell he is, indeed, one of my Jewish friends). Next, he said something that’s made me reflect a lot, that &amp;ldquo;a lot of this year has been identifying what you value&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;What do I value?&lt;/p&gt;



&lt;p&gt;My family, certainly. A nice glass of scotch after a cold day, sure. My work, maybe (I value being &lt;em&gt;good&lt;/em&gt; at what I do more than doing it, if that makes any sense).&lt;/p&gt;

&lt;p&gt;Me, though? Do I value myself? Of course, if asked, I would’ve said yes. But I don’t think I truly valued myself as much as I should. And I think a big part of that was not having a &lt;em&gt;way&lt;/em&gt; to value myself. A framework, if you will.&lt;/p&gt;

&lt;p&gt;One of the ways I’ve found to value myself, and figure out how I fit into the world, has been embracing being a Jew. One of the morning brachot says &amp;ldquo;baruch atah hashem, she’asani yisrael&amp;rdquo; &amp;ndash; I wake up thankful to be a Jew. But what does that mean in 2020, in San Francisco?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Time for a little aside.&lt;/p&gt;

&lt;p&gt;For almost 20 years, I have brushed aside the notion of prayer.
Why should I pray, when I don’t really believe that there’s an audience for those prayers?
Cue something like a decade of cynicism.&lt;/p&gt;

&lt;p&gt;I intentionally stopped attending Hebrew School immediately after becoming bar mitzvah.
I was suspicious of the number of in-groups the synagogue had.
I heard so many Jewish friends deride anyone who became &amp;ldquo;more observant&amp;rdquo;.
I thought every form of observance was an obstacle to living a &amp;ldquo;normal&amp;rdquo; life.&lt;/p&gt;

&lt;p&gt;Fast forward to 2016.&lt;/p&gt;

&lt;p&gt;I started traveling, an in particular, that year I went to Berlin, Amsterdam, Prague, and Budapest.
All cities that used to have robust &amp;amp; beautiful Jewish populations.
Cities where the Jews were wiped out in the Shoah.
Where the only remains of Jewish life are synagogues turned into museums, devoid of their congregants.&lt;/p&gt;

&lt;p&gt;Those trips stirred something inside me.
Tears, certainly, but the haunting beauty of the old synagogues stayed with me.
I returned back home to Chicago, attended High Holy Day services at the local shul, and that was it.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;In the lead up to this year’s days of awe, I spent some time listening to some talks put out by the synagogue I’d attended the year prior. (I jotted down some ramblings at the time, both &lt;a href="https://gist.github.com/segiddins/534c029d11d27774ae2e9851513d6cf4"&gt;prior to Rosh Hashanah&lt;/a&gt; and &lt;a href="https://gist.github.com/segiddins/e14f9d18eab42ad463c6e6b3a659379c"&gt;right before Yom Kippur&lt;/a&gt;.)
One week, the focus was on the Unetanneh Tokef. Particularly the conclusion.
U t’shuva, u tefillah, u tzedakah ma’avirin et-roa hagzerah.
But t’shuva, tefillah, and tzedakah can transform (or temper) the harshness of the decree.&lt;/p&gt;

&lt;p&gt;I’ll skip the (very interesting!) debate about how exactly that’s supposed to work.
But one explanation has stuck with me, months after the close of the gates on neilah.
It is the idea that &lt;em&gt;the acts&lt;/em&gt; of t’shuva, tefillah, and tzedakah change &lt;em&gt;us&lt;/em&gt;, transform us.&lt;/p&gt;

&lt;p&gt;And that’s the first explanation of prayer, tefillah, that has resonated with me.
Why pray, if I don’t believe it can change the world around me?
Because I know for certain that it can change me.&lt;/p&gt;

&lt;p&gt;We repeat the same prayers over and over, every day, every week.
When I was younger, I found the repetition to be rote.
Now, I draw comfort from it, the same comfort you feel when wrapping youself in the hug of a tallit.
The words, the melodies, the sheer familiarity helps focus kavanah, intention.
The intention to really think about family members who are sick as I pray for healing.
The intention to be able to pray the words of my heart, even if they’re not written down in the siddur.
The intention to want to be myself, the best version of myself, the only version of myself.&lt;/p&gt;

&lt;p&gt;Because there is no version of me who is not a Jew.
There is no part of me that can’t appreciate the magic of Shabbat as it rolls around, every single week.
There is no part of me that does not weep and mourne for the thousands of years of trauma our people have endured.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This year, I hosted my own Seder for the first time.
I hosted my own Rosh Hashanah dinner for the first time.
(Both meals I cooked for 10. There is no other way to do a holiday meal).
I started attending Kabbalat Shabbat services weekly at one synagogue.
I called into Havdallah weekly with a &lt;em&gt;different&lt;/em&gt; shul.
Attended high holy day services on my own, from my living room.
I blew my own shofar (sorry, neighbors!)
I read Jewish books, listened to Jewish music, made Jewish tweets.&lt;/p&gt;

&lt;p&gt;In a year that&amp;rsquo;s seen so much turned upside-down, this is where I found comfort.
This is what my actions say I valued.
This is what I valued.
This is who I was.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Why even bother writing this down?&lt;/p&gt;

&lt;p&gt;Because I want to proudly &amp;amp; openly embrace this facet of myself.
Because I want to undo the decade of distance I forced upon myself.
Because, like prayer, the point is to transform myself, into the person I want to be.
And saying it out loud is just a part of how that works.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This time, it was a compiler bug</title>
    <link rel="alternate" href="http://blog.segiddins.me/2020/04/15/this-time-it-was-a-compiler-bug/"/>
    <id>http://blog.segiddins.me/2020/04/15/this-time-it-was-a-compiler-bug/</id>
    <published>2020-04-16T01:00:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I write software for a living. At least, I pretend to. Most of the time, my job is building &amp;amp; running (&amp;amp; yes, occasionally fixing) software other people have written.&lt;/p&gt;

&lt;p&gt;One of the aphorisms of software development is that &amp;ldquo;it&amp;rsquo;s never a compiler error&amp;rdquo;. Sure, it&amp;rsquo;s not &lt;em&gt;never&lt;/em&gt; a compiler error, since compilers are written by humans and therefore are as flawed as any other piece of software. But it&amp;rsquo;s &lt;em&gt;never&lt;/em&gt; a compiler error, in the sense that, when you find a bug, the probability of it being caused by a compiler error exists on a set of measure zero.&lt;/p&gt;

&lt;p&gt;Well, today I hit the jackpot. This time, it really was a compiler bug.&lt;/p&gt;

&lt;p&gt;Almost.&lt;/p&gt;



&lt;p&gt;At work, we&amp;rsquo;re fortunate to have a bunch of tests.
I&amp;rsquo;m unfortunate in that my job is essentially to make sure we run those tests.&lt;/p&gt;

&lt;p&gt;A (somewhat) common pattern we have is to have test cases initialize a test fixture at the start of each test method,
and at the end &lt;code&gt;nil&lt;/code&gt; out the fixture and make sure it was deallocated. Makes sense, right? We want to make sure we&amp;rsquo;re not leaking objects over into the next test.&lt;/p&gt;

&lt;p&gt;That pattern looks a little something like this:&lt;/p&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="n"&gt;Foundation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="n"&gt;XCTest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;TestFixture&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;NSObject&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;testFixtureForCountryCode&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;initWithCountryCode&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;otherParam&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;TestFixture&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;testFixtureForCountryCode&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nf"&gt;initWithCountryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;initWithCountryCode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;initWithCountryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="nf"&gt;otherParam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;initWithCountryCode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;otherParam&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;otherParam&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;_otherParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;otherParam&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;tearDown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do stuff
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dealloc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;XCTestCase&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;Tests&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;XCTestCase&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;TestFixture&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testFixture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;Tests&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testFixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestFixture&lt;/span&gt; &lt;span class="nf"&gt;testFixtureForCountryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"en_US"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testFixture&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;__weak&lt;/span&gt; &lt;span class="n"&gt;__typeof__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testFixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;weakTestFixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testFixture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testFixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;XCTAssertNil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weakTestFixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"Expected thing to be nil"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;test_empty&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;test_empty2&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve had tests that have been doing that for years. They&amp;rsquo;ve been passing. Until now.
When we&amp;rsquo;ve been switching to &lt;a href="https://bazel.build/"&gt;Bazel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After months of painstaking work, we&amp;rsquo;ve got our apps building, and most of our tests building,
and almost most of them passing.&lt;/p&gt;

&lt;p&gt;Except for some tests that use test fixtures. And assert that those test fixtures get deallocated.
And they passed in Xcode. And failed when run via Bazel.&lt;/p&gt;

&lt;p&gt;Queue three days of chasing my tail, adding hundreds of random print statements to chase down these bugs.
Yesterday, I fixed a bug around using &lt;code&gt;+[NSHashTable weakObjectsHashTable]&lt;/code&gt; (turns out, you &lt;strong&gt;really&lt;/strong&gt; want &lt;code&gt;NSMapTableObjectPointerPersonality&lt;/code&gt; instead of &lt;code&gt;NSPointerFunctionsObjectPersonality&lt;/code&gt; when you&amp;rsquo;re potentially storing multiple proxy objects that compare equal and want them all to receive delegate callbacks. Anyways.)
I thought that was going to be the worst of it.&lt;/p&gt;

&lt;p&gt;It, of course, wasn&amp;rsquo;t, because that bug on its own doesn&amp;rsquo;t warrant a blog post.&lt;/p&gt;

&lt;p&gt;The code above was failing in Bazel. It passed when I used &lt;code&gt;alloc init&lt;/code&gt; directly, instead of the factory class method to create the test fixture.
It passed when I moved the allocation and assignment into an &lt;code&gt;@autorelease&lt;/code&gt; block.
It passed the smell test when I popped the binary into Hopper and started reading decompiled methods.&lt;/p&gt;

&lt;p&gt;But it failed as written. And I was determined to get to the bottom of things.&lt;/p&gt;

&lt;p&gt;Guessing that something was maybe up around autoreleases, I looked at the dissassembly, instead of Hopper&amp;rsquo;s (amazing) decompiler view.
I remembered, thanks to an old &lt;a href="https://www.mikeash.com/pyblog/friday-qa-2014-05-09-when-an-autorelease-isnt.html"&gt;Mike Ash article&lt;/a&gt; from back in the day,
that the modern ObjC runtime does some (extra) magic around autoreleasing values.&lt;/p&gt;

&lt;p&gt;The (working) code ends up compiling to something like this in Xcode:&lt;/p&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="k"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;testFixtureForCountryCode&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;arg2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var_18&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;objc_storeStrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;var_18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var_30&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nf"&gt;initWithCountryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var_18&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;objc_storeStrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;var_18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var_30&lt;/span&gt; &lt;span class="nf"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;whereas from Bazel it&amp;rsquo;s getting compiled down to:&lt;/p&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @class TestFixture */&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;testFixtureForCountryCode&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;arg2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var_8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;___stack_chk_guard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;var_10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;objc_storeStrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;var_10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var_28&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nf"&gt;initWithCountryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var_10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;objc_storeStrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;var_10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;var_30&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var_28&lt;/span&gt; &lt;span class="nf"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;___stack_chk_guard&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;var_8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var_30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__stack_chk_fail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;___stack_chk_guard&lt;/code&gt;? &lt;code&gt;__stack_chk_fail&lt;/code&gt;? What is that stuff? Initially, I ignored them since they seemed inconsequential to the program&amp;rsquo;s control flow.&lt;/p&gt;

&lt;p&gt;But, going back to that discussion of &lt;code&gt;objc_retainAutoreleaseReturnValue&lt;/code&gt; and &lt;code&gt;objc_autoreleaseReturnValue&lt;/code&gt;, and keeping in the back of my head that they inspected the calling code&amp;rsquo;s following instructions, I started hunting for differences in the &lt;code&gt;clang&lt;/code&gt; invocations between Xcode and Bazel.&lt;/p&gt;

&lt;p&gt;After a lot of sorting, I had a culprit. &lt;code&gt;-fstack-protector&lt;/code&gt;. It seemed so innocent. Protecting the stack sounds good! The &lt;a href="https://clang.llvm.org/docs/ClangCommandLineReference.html"&gt;clang command line reference&lt;/a&gt; only says that &lt;code&gt;-fstack-protector&lt;/code&gt; will &lt;code&gt;enable stack protectors for some functions vulnerable to stack smashing&lt;/code&gt;. That doesn&amp;rsquo;t at all sound destructive!&lt;/p&gt;

&lt;p&gt;However, due to the way the stack protector works (by adding instructions at the start and end of function), they can interfere with a call to &lt;code&gt;objc_autoreleaseReturnValue&lt;/code&gt; being able to see it&amp;rsquo;s matching call to &lt;code&gt;objc_retainAutoreleaseReturnValue&lt;/code&gt;, and then &lt;code&gt;[object autorelease]&lt;/code&gt; will actually have to do an autorelease. Which means that the object will go into the autoreleasepool. And it won&amp;rsquo;t be deallocated until that pool drains. And &lt;code&gt;XCTestCase&lt;/code&gt;&amp;rsquo;s &lt;code&gt;-setUp&lt;/code&gt; and &lt;code&gt;-tearDown&lt;/code&gt; methods happen inside the same autoreleasepool.&lt;/p&gt;

&lt;p&gt;Boom. Bug.&lt;/p&gt;

&lt;p&gt;Objects here really &lt;em&gt;were&lt;/em&gt; living longer under Bazel than they were in Xcode, since autoreleased objects were actually being autoreleased (and subsequently retained), instead of ending up skipping both the autorelease and the retain (&lt;code&gt;init&lt;/code&gt; methods return already-retained objects).&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;re all caught up and fully understand the bug (and have spent enough time saying &amp;ldquo;what the&amp;hellip;&amp;rdquo; to an empty room to calm down), there are a couple of obvious solutions. The first is to, you know, write correct code. If we want to test that objects aren&amp;rsquo;t participating in an accidental retain cycle, we need to make sure that their creation happens inside an autoreleasepool that&amp;rsquo;s drained by the desired end of that objects lifetime. Moving the &lt;code&gt;self.testFixture = ...&lt;/code&gt; initialization &amp;amp; assignment inside of an &lt;code&gt;@autoreleasepool&lt;/code&gt; block will do just that for us.
And the second is to make our migration easier, by not passing &lt;code&gt;-fstack-protector&lt;/code&gt; in the new build system, when it wasn&amp;rsquo;t passed in the old build system. (Or, in the case of bazel, to pass &lt;code&gt;--per_file_copt=&amp;quot;.*\.m&amp;quot;,&amp;quot;@-fno-stack-protector&amp;quot;&lt;/code&gt; on the command line, since there&amp;rsquo;s no way to get it to stop passing &lt;code&gt;-fstack-protector&lt;/code&gt; and there&amp;rsquo;s no other way to sneak my &lt;code&gt;-fno-&lt;/code&gt; flag in after Bazel&amp;rsquo;s flag gets added.)&lt;/p&gt;

&lt;p&gt;What made this bug so fun (and infuriating) to investigate was that it sat at the intersection of a bunch of different moving pieces.
Our code was technically wrong (relying on performance optimizations in the runtime isn&amp;rsquo;t especially safe).
Bazel did something incredibly unexpected (passing &lt;code&gt;-fstack-protector&lt;/code&gt; when I didn&amp;rsquo;t ask it to).
The Objective-C runtime has a performance optimization that does more than optimize (this is valid code under ARC, and yet it&amp;rsquo;s behavior is different from what ARC&amp;rsquo;s semantics say it should be).
And, finally, clang allows me to pass a compiler option that changes observable behavior, without documenting that it can do more than catch a small set of bugs.&lt;/p&gt;

&lt;p&gt;So, they say that it&amp;rsquo;s never a compiler bug. And in this case, it might not be a compiler bug.
But it sure is close to one.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Boring Life</title>
    <link rel="alternate" href="http://blog.segiddins.me/2020/01/21/a-boring-life/"/>
    <id>http://blog.segiddins.me/2020/01/21/a-boring-life/</id>
    <published>2020-01-21T17:00:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I came across a tweet recently (it’s not that unusual these days). Someone was saying they wanted to get a KitchenAid (do it!) to be able to make homemade pizza dough, and said that this made them a boring adult now. It got me thinking, and then I wrote this.&lt;/p&gt;

&lt;p&gt;I’ve contemplated a lot about my life recently. Maybe it’s something to do with being 25. Maybe it’s because I’ve gotten to watch several people around me undertake significant life changes. Maybe it’s because I’m human and we’re prone to doing this sort of thing all the time. I don’t know.&lt;/p&gt;



&lt;p&gt;Anyways, some of that thinking has been in connection with talking. The sort of talking that happens whenever you see or call family, and you have to act out the same script over and over for the three billionth time, because of course your grandfather or uncle or mom’s childhood friend want to know how you are (or rather, they have to ask. they probably don’t actually want to know). Before I got a full-time job, this was actually a pretty fun script to follow. If I skipped enough conversations, there would be enough scheduled, structural changes in my life to fill out a thirty minute conversation and thus fullfil my duty as someone a generation or two younger than whoever was on the other end of the line.&lt;/p&gt;

&lt;p&gt;New quarter in school? Talk about the new classes! Complain about the professors! Say what you didn’t learn about the quarter before that you were expecting to learn! Lot’s of personal stuff to talk about that wasn’t really about &lt;em&gt;me&lt;/em&gt;, but rather was about the world around me. It was changing, and I could pass that off as the news in my life.&lt;/p&gt;

&lt;p&gt;But now? Sure, I completed another sprint at work. I do that every two weeks. But I’m not sure the NDA I signed even allows me to say the goofy sprint name we put in JIRA, much less talk about tickets and how they’re germane to the business and somehow convince myself that moving a label over a few pixels or filing some new Xcode bug to  was a worthy pursuit for a college-educated grandson. But even if I &lt;em&gt;could&lt;/em&gt; talk about it: who cares? Seriously. My manager barely gets through ten minutes of my weekly status updates, and he gets paid to listen! My aunt definitely doesn’t have the context necessary to talk about bazel build hermeticity (sure, that’s probably a word) and how it interacts with &lt;code&gt;actool&lt;/code&gt; and &lt;code&gt;.appiconset&lt;/code&gt; bundles, but I swear I can spend a whole week at work fighting that.&lt;/p&gt;

&lt;p&gt;I’m not complaining, of course. I get paid well for this and I largely enjoy it. But that’s 7-10 hours of the day, five days a week. Another  8-9 I spend sleeping (because I’m a boring adult now and don’t stay up until 4am watching Yu-Gi-Oh! reruns or playing smash any more). At least an hour is spend trying to transition myself from my bedroom to the rest of my apartment, and then back again (I’ve never been a morning person). I cook, and there’s only so many times you can talk about your 60th chicken soup of the year. Or the second night in a row making shameful mac n cheese because honestly hot cheese powder on carbs sounded good at the time.&lt;/p&gt;

&lt;p&gt;I watch the same TV shows, sitting on the same couch with the same person (yes, it probably is time for the third re-watch of Downton Abbey, just because it means I’ll drink more tea). Date nights happen at the same set of restaurants (again, with the same person. They’d want me to clarify that, I’m pretty sure). Remembering to vacuum and fold laundry is an accomplishment (one for me and the other for them).&lt;/p&gt;

&lt;p&gt;Writing all this down, it does sound kinda boring. And yet&amp;hellip;&lt;/p&gt;

&lt;p&gt;I can’t decide whether it’s a bad thing or not. Is it boring, or is it stable? I haven’t had to move apartments since graduating college. I’m saving money and don’t have debt (not my doing, really, so thank the family for that one). I get to buy the fancy Dyson vacuum on a whim and genuinely get pleasure from watching the dust behind the toilet dissappear (that was my one year vesting cliff present to myself, and I have no regrets). I went to four continents last year, and it’s become such a common occurence my mom gets upset when I forget to remind her that there’s another trip coming up (I swear I told her at least once. She admonishes me to forward her emails with my itinerary. I usually remember to do so before the first flight takes off). My partner and I went on an almost-two-week vacation to Australia because I found upgrade space on United (true story. We went via Houston for that). On that trip, we must’ve done at least four tasting menus, and didn’t worry about splurging too much. My parents complained they got more photos of the food than of me (this happens every trip, and I suppose I should be happy they still expect something different from me?) &lt;/p&gt;

&lt;p&gt;I think some of the feeling of &amp;ldquo;boring&amp;rdquo; is centered around not having answers for other people when they ask what’s happening in my life. Because I know that the answer will, to them, sound like &amp;ldquo;same old, same old&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;But to me, the person living that boring, adult life? I get to try out new recipes at home. Continue my search for adequate pizza on the left coast. Make progress in my career (even though the &amp;ldquo;L4 means software engineer, L5 also means software engineer. No I’m not a manager. Yet&amp;rdquo; conversation is hella old by now). Spend another year proving I’m not so intolerable that someone won’t be willing to (sometimes) share a living space with me. Spend time in other countries, and come home with renewed hope that the world can be different from the one I experience day-to-day. Read a lot of books (yes, a bunch were about baseball. yes, a bunch were about medieval england. yes, a bunch were about the world between 1930 and 1950. yes, a bunch identify me as woefully weak in jewish philosophy). Listened to too many podcasts (I know they sell mattresses on the internet now. I’m still not buying, but thanks for asking, Casper). Made more and more internet friends, at least one with each passing conference.&lt;/p&gt;

&lt;p&gt;In short (though I probably shouldn’t say this. I refuse to edit, and there’s still a few more miles left in this flight and I might continue to be verbose), I don’t know what I’d do differently. Is it boring? Is it adult? Maybe. Is it life? Absolutely, it’s my life. I’m reasonably happy with it, and I really can’t point at anything as being bad or wrong. Should I go to the gym more frequently? (Probably, just don’t ask me right after I’ve left it and everything is sore). Should I cut back on meat consumption because planet earth is dying? (Certainly, I have no excuses here). Should I spend more time being present with my partner instead of scrolling through the Hell Website? (Yeah, but the dumb tweets make for funny conversation a lot of the time). Should I call my grandparents more often? (I swerar I just called them mom, but no, don’t ask them about it). Should I care a bit less about finding sales on kitchen gadgets? (You can pry my AllClad and Shun out of my cold, dead hands).&lt;/p&gt;

&lt;p&gt;So I’m not perfect. Not close. But it’s not like these are major life decisions I want a do-over on. They’re tweaks. Small adjustments I just haven’t made because I’m weak, I’m human. I sin, I repent, the transgressions are forgiven. But they’re not regrets. I don’t regret the steak I had with my mom on Friday, because we had a good dinner together. I don’t regret working a bit on Sunday night after my dad went to bed, because I got some satisfaction out of making a new test suite pass. I don’t regret flying to Oslo last November, because I made some awesome new friends (turns out, staying out until 3am dancing and drinking beer is still a good bonding activity. Carry on). I don’t regret starting to go to the gym, nor the fact that I only go three times a week. I don’t regret the fact that I don’t own a house (then I’d have to feel bad about being gone so often). I don’t regret watching the Bread episodes of the Great British Bake Off over and over because I love bread, and watching it with my partner (a wooden cutting board of buttered bread on my coffee table) still makes me smile.&lt;/p&gt;

&lt;p&gt;(See, I told you the &amp;ldquo;in short&amp;rdquo; wouldn’t be short). I don’t really have a conclusion here. I guess I’m still trying to grapple with what an &amp;ldquo;adult life&amp;rdquo; is, what a &amp;ldquo;boring life&amp;rdquo; is, and what the hell I want &lt;strong&gt;my&lt;/strong&gt; life to be. All I know (ok, I know a lot. One thing I know) is that I have no regrets right now, and as long as that remains true, I think I’m doing OK. Whatever type of life you want to describe mine as, I like it. Bring the next year on.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Nagging</title>
    <link rel="alternate" href="http://blog.segiddins.me/2017/09/07/nagging/"/>
    <id>http://blog.segiddins.me/2017/09/07/nagging/</id>
    <published>2017-09-07T20:30:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There are several different trains of thought when it comes to software &amp;ldquo;nagging&amp;rdquo; users about updates.
Naturally, I want to talk a bit about how this works in the open-source developer tools world.&lt;/p&gt;



&lt;p&gt;The spectrum of update nagging varies from &amp;ldquo;none&amp;rdquo; to &amp;ldquo;auto-updating&amp;rdquo;.
Homebrew, for example, auto-updates every so often whenever you run a &lt;code&gt;brew ...&lt;/code&gt; command.
It eschews releases, and basically makes staying on what you percieve as a &amp;ldquo;stable&amp;rdquo; version impossible.
On the other end of the spectrum, tools like &lt;code&gt;openssl&lt;/code&gt; will never tell you there&amp;rsquo;s a new version. You never get a &amp;ldquo;nag&amp;rdquo; to update, but you also never get a warning when major bugs are fixed (including those that could make your system vulnerable to attack).&lt;/p&gt;

&lt;p&gt;A couple of things I work on (CocoaPods, Bundler) have decided to chart a middling course. They never auto-update, but they&amp;rsquo;ll tell you when the version that&amp;rsquo;s running is out-of-date. I think this is the best of both worlds &amp;ndash; your development environment will never be silently changed without your consent, but you&amp;rsquo;ll also stay aware of new versions and be given an impetus to update.&lt;/p&gt;

&lt;p&gt;And keeping your tools up-to-date is &lt;strong&gt;important&lt;/strong&gt;. As someone who maintains lots of open source software, I can say with 100% confidence that &lt;em&gt;the only way to get support is to be on the latest version&lt;/em&gt;. Fixes usually don&amp;rsquo;t get backported, and my first response to an issue is almost always to ask &amp;ldquo;is this fixed with the latest release?&amp;rdquo; As a maintainer, I can&amp;rsquo;t help someone who doesn&amp;rsquo;t update. And the only route I have to get people to stay up-to-date is to advise them that there&amp;rsquo;s an update available.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Group of Friends</title>
    <link rel="alternate" href="http://blog.segiddins.me/2017/06/10/group-of-friends/"/>
    <id>http://blog.segiddins.me/2017/06/10/group-of-friends/</id>
    <published>2017-06-11T01:23:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today, I watched my best friends graduate college. University of Chicago, class of 2017. Bachelors of Arts and Science. I&amp;rsquo;m just starting to appreciate just how lucky I was to have them. They were my first real group of friends.&lt;/p&gt;



&lt;p&gt;I met them the day I moved into my dorm. Saturday, September 22, 2013.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Andrew.&lt;br&gt;
Dan.&lt;br&gt;
Evan.&lt;br&gt;
Juliet.&lt;br&gt;
Katherine.&lt;br&gt;
Sam.&lt;br&gt;
Woody.&lt;br&gt;
Yida.  &lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been through so much in the past four years, and I&amp;rsquo;m immensely proud of all of them. But even more than being just wonderful people in every way, they&amp;rsquo;ve become my family. As I&amp;rsquo;ve drifted further and further away from the people I grew up with in New York, they &lt;em&gt;collectively&lt;/em&gt; have come to fill that gap.&lt;/p&gt;

&lt;p&gt;We have bizarre traditions: Valois o&amp;#39;clock, Kuvia, John Handy. We&amp;rsquo;ve seen others come and go &amp;ndash; due to graduation or voluntary retirement from our whirlwind community. We&amp;rsquo;ve experienced enough drama for a lifetime. We&amp;rsquo;ve had late nights discussing career prospects, SOSC readings, relationship woes, strange YouTube videos, and nothing at all. But we&amp;rsquo;ve stuck together through it all. And today, I stayed in Hyde Park to watch them graduate, together. I even got in on one champagne-soaked photo. Because, even though I may technically be Class of 2018, they will forever be my UChicago family. And I was with them in spirit, if not in body, when President Big Bobby Z conferred upon them their degrees and pronounced them educated.&lt;/p&gt;

&lt;p&gt;Though it was bittersweet and emotional and generally difficult to see them graduate without me today, that isn&amp;rsquo;t to mean I have regrets over the path my life has taken. I&amp;rsquo;ve had many wondrous opportunities, have lived on my own, explored the world, and grown up. But part of that has meant leaving this newfound family behind. And now, they leave me behind. (Albeit only for a short while, I&amp;rsquo;ll be graduating very soon myself.) I can&amp;rsquo;t imagine UChicago without them &amp;ndash; fall quarter will be very strange.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve discovered how amazing it is to have a cohesive group of friends. A group of people who share an immense repertoire of jokes, memories both painful and joyous, incredibly odd tastes, and a zeal for each others company. They&amp;rsquo;ve seen me at my highs and lows, and I&amp;rsquo;ve seen them struggle and triumph as one only can in college. We&amp;rsquo;ve all gone through different relationships. Different internships. Different majors. But we&amp;rsquo;ve shared four years of our lives.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Now, we scatter.&lt;br&gt;
But they will always remain my closest group of friends from college.&lt;br&gt;
I love them all immensely.&lt;br&gt;
They&amp;rsquo;re my family.&lt;br&gt;
They&amp;rsquo;re Salisbury.  &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Never Again</title>
    <link rel="alternate" href="http://blog.segiddins.me/2017/01/28/never-again/"/>
    <id>http://blog.segiddins.me/2017/01/28/never-again/</id>
    <published>2017-01-29T02:20:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I grew up hearing the phrase &amp;ldquo;never again&amp;rdquo;. As a young Jewish boy, those two words embodied how I understood justice. It meant that we&amp;rsquo;d learn from the atrocities of the past, and do my part to ensure they wouldn&amp;rsquo;t happen on my watch.&lt;/p&gt;

&lt;p&gt;Right now, that very idea of justice is under attack.&lt;/p&gt;



&lt;p&gt;Last year, I visited four cities in Europe that used a have large Jewish communities. Berlin, Amsterdam, Prague, and Budapest. In every one of them, I spent a day visiting historic synagogues and graveyards and museums. Not just because they represented my heritage, but because the people whose lives they represented were no longer around to speak for themselves. They were murdered in the Shoah.&lt;/p&gt;

&lt;p&gt;Instead of museums and memorials, there should have been living people. Singing, dancing, praying, arguing, working, living people. But there were only stories and relics.&lt;/p&gt;

&lt;p&gt;I sit now, at home in Chicago, and the feeling I&amp;rsquo;ve been trying to resist since August of 2015 is becoming impossible to resist any longer. The world is under attack. Sure, it always has been in some sense, but right now the danger is more real and palpable than any other time I can recall in my 22 years on this Earth. Fascism and Nazi is no longer just a specter haunting is. It is our frightening reality. Today, the President unilaterally attacked Americans solely on the basis of where they were born. People are being held at airports, unable to return home. And our leaders are largely silent.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s been eight days of Trump presidency, and we&amp;rsquo;re already at the &amp;ldquo;first he came for the Muslims&amp;rdquo; part. And we all know how this ends.&lt;/p&gt;

&lt;p&gt;I will not be complicit in bigotry, racism, xenophobia, nor hatred. I will not let my silence stand as tacit endorsement for what is happening around me. I will not let others use parts of my identity to justify hatred. I will not stand idly by as injustice is committed.&lt;/p&gt;

&lt;p&gt;I will not allow myself to wait until I can visit museums recognizing the atrocities this administration has promised. I will not allow them to erase the Shoah from history, as they attempted to do yesterday. I will not live in a world where there are memorials to those exterminated &amp;ndash; because I refuse to live to see that happen.&lt;/p&gt;

&lt;p&gt;First they came for the weak, the vulnerable, those who look different, dress different, speak different, worship different.&lt;/p&gt;

&lt;p&gt;And I said &lt;strong&gt;never again&lt;/strong&gt; to their hatred.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>עֵל חֵטְא</title>
    <link rel="alternate" href="http://blog.segiddins.me/2016/10/12/%D7%A2%D6%B5%D7%9C%2520%D7%97%D6%B5%D7%98%D6%B0%D7%90/"/>
    <id>http://blog.segiddins.me/2016/10/12/%D7%A2%D6%B5%D7%9C%2520%D7%97%D6%B5%D7%98%D6%B0%D7%90/</id>
    <published>2016-10-12T18:00:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;These ten days between Rosh Hashanah and Yom Kippur are supposed to be about repentance for transgressions against other people. Yom Kippur is only about atonement for sins against god (or yourself, depending on your understand of things). It’s so cathartic to just write out the things you’ve done in a year you’re sorry for, and to let people know that you want their forgiveness.&lt;/p&gt;

&lt;p&gt;In that vein, &lt;em&gt;al cheyt&lt;/em&gt;:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;For the sin of not calling my sick aunt often enough.&lt;/li&gt;
&lt;li&gt;For the sin of not visiting my dying uncle.&lt;/li&gt;
&lt;li&gt;For the sin of pretending to be asleep to avoid difficult conversations.&lt;/li&gt;
&lt;li&gt;For the sin of not texting my sisters.&lt;/li&gt;
&lt;li&gt;For the sin of giving my father a hard time, even when he&amp;rsquo;s tried his best.&lt;/li&gt;
&lt;li&gt;For the sin of lazily handwaving on homework to save a few minutes,&lt;/li&gt;
&lt;li&gt;For the sin of piling onto twitter bandwagons.&lt;/li&gt;
&lt;li&gt;For the sin of using sarcasm as a substitute for humor.&lt;/li&gt;
&lt;li&gt;For the sin of trying to be funny instead of compassionate.&lt;/li&gt;
&lt;li&gt;For the sin of enjoying myself instead of taking care of others.&lt;/li&gt;
&lt;li&gt;For the sin of bragging at my own accomplishments, instead of praising others.&lt;/li&gt;
&lt;li&gt;For the sin of wallowing in self-pity, even when things are going well.&lt;/li&gt;
&lt;li&gt;For the sin of being in-authentic online or around friends.&lt;/li&gt;
&lt;li&gt;For the sin of ignoring tradition for the sake of convenience.&lt;/li&gt;
&lt;li&gt;For the sin of laughing at times I should have cried.&lt;/li&gt;
&lt;li&gt;For the sin of abandoning principle to save face.&lt;/li&gt;
&lt;li&gt;For the sin of staying silent in the face of others&amp;rsquo; oppression.&lt;/li&gt;
&lt;li&gt;For the sin of looking too hard at numbers instead of people.&lt;/li&gt;
&lt;li&gt;For the sin of not forgiving those who have seen the error of their ways.&lt;/li&gt;
&lt;li&gt;For the sin of not speaking up when I hear people being mis-gendered.&lt;/li&gt;
&lt;li&gt;For the sin of setting my goals too high, even though it will mean a burden on others.&lt;/li&gt;
&lt;li&gt;For the sin of not taking care of myself, and being grumpy about it.&lt;/li&gt;
&lt;li&gt;For the sin of letting others waste hours so I can save minutes.&lt;/li&gt;
&lt;li&gt;For the sin of not doing my part to achieve &lt;em&gt;tikkun olam&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;For the sin of willful ignorance for the sake of momentary bliss.&lt;/li&gt;
&lt;li&gt;For the sin of knowing all these transgressions, yet waiting until today to atone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is my litany of woe. May I have a chance to be better in the new year.&lt;/p&gt;

&lt;p&gt;.שנה טובה‎‎&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Road to CocoaPods 1.0</title>
    <link rel="alternate" href="http://blog.segiddins.me/2016/09/16/road-to-cocoapods-1-0/"/>
    <id>http://blog.segiddins.me/2016/09/16/road-to-cocoapods-1-0/</id>
    <published>2016-09-16T13:00:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;This is the talk I gave at NSSpain 2016&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Road to CocoaPods 1.0&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been CocoaPods&amp;rsquo; lead developer for the past couple of years, and today I&amp;rsquo;m going to tell the story of CocoaPods 1.0.&lt;/p&gt;



&lt;p&gt;A long time ago, in a land far, far away, there was a programming language called Objective-C. It had many developers, who went into Xcode to work their trade and develop applications. They were happy they could build apps for their favorite platform.&lt;/p&gt;

&lt;p&gt;This is our &amp;ldquo;ancient history&amp;rdquo;. Our origin story.&lt;/p&gt;

&lt;p&gt;As more and more people started to build more and more applications, they realized that there are only so many different kinds of wheels that you can re-invent. And thus the third party library was born. And the developers were happy.&lt;/p&gt;

&lt;p&gt;But then, some of our ranks found that merely having libraries and frameworks wasn&amp;rsquo;t enough. They wanted a way to easily share the code they wrote, and to partake of others&amp;rsquo; code, and to build an open source community for the Cocoa world.&lt;/p&gt;

&lt;p&gt;And thus CocoaPods was born. It wasn&amp;rsquo;t created to incite flamewars on Twitter or provoke your ire when it spews out a ruby backtrace.&lt;/p&gt;

&lt;p&gt;CocoaPods was intended to be a community and a tool for everyone who worked on Cocoa apps. And judged in that light, I think it&amp;rsquo;s done marvelously.&lt;/p&gt;

&lt;p&gt;CocoaPods today is the hub for open source projects for our community &amp;ndash; a list of projects, documentation, metrics, along with the litany of tools that have been written to work with CocoaPods.&lt;/p&gt;

&lt;p&gt;For years, people would point out that CocoaPods wasn&amp;rsquo;t at version 1.0 yet. In semantic versioning terms, that meant that we weren&amp;rsquo;t promising it would be &amp;lsquo;stable&amp;rsquo;. We even had an FAQ entry explaining that CocoaPods was used in a lot of apps, even though it wasn&amp;rsquo;t yet 1.0.&lt;/p&gt;

&lt;p&gt;Even so, getting to 1.0 has been a goal from the beginning. 1.0 meant CocoaPods was ready for use in production. It meant CocoaPods would be stable. It meant that it would somehow be &amp;ldquo;done&amp;rdquo; &amp;ndash; it would do everything it had to, and do it well enough that we wouldn&amp;rsquo;t need to make breaking changes. And most of all, it&amp;rsquo;s a nice milestone to be proud of. And get lots of views on Twitter, of course!&lt;/p&gt;

&lt;p&gt;Today is actually the five-year anniversary of the first release of CocoaPods to RubyGems. Back then, it could only be run on MacRuby and wasn&amp;rsquo;t even 0.1!&lt;/p&gt;

&lt;p&gt;In the beginning, CocoaPods was rather small. Eloy manually created pod specs for a few of the most popular libraries, it generated a simple Xcode project, and you had to do the rest by hand. It&amp;rsquo;s grown a lot in the past five years. There even used to be an issue for Eloy to add tens of specs to the specs repo! (We closed it as being well and truly accomplished.)&lt;/p&gt;

&lt;p&gt;We slowly added new features and team members and web properties. Guides and CocoaDocs and a Twitter feed. Better Xcode support, the ability to specify more custom things in your Podfile and Podspec.&lt;/p&gt;

&lt;p&gt;I joined the CocoaPods team after the Bug Bash at the end of March 2014. We triaged hundreds of issues, some of which dated back to before I had ever written a line of Objective-C. And in doing so, I became intimately familiar with how CocoaPods worked, and got to know the team. I knew immediately it would be something I wanted to be a part of.&lt;/p&gt;

&lt;p&gt;We worked on shipping CocoaPods trunk and CocoaDocs 2.0 and plugin support. Things kept on chugging along, and things continued apace for several months, especially since Fabio was being paid to work on CocoaPods.&lt;/p&gt;

&lt;p&gt;For a while, we recognized that CocoaPods was rapidly changing, and justified the pre-1.0 version with the fact that we occasionally needed to make breaking changes. Users kept on discovering new ways to use CocoaPods, and thus we always had new bugs to fix, or code that needed refactoring.&lt;/p&gt;

&lt;p&gt;Following v0.34, which came out in September 2014, the idea that CocoaPods was becoming stable began to take hold. We had refactored many parts of the codebase, and changed the way files were laid out on disk. In the process, we probably broke 50% of all CocoaPods projects at some point, but at the end of that release cycle, we had a piece of software that we were reasonably happy with.&lt;/p&gt;

&lt;p&gt;That time period was also the peak of my personal satisfaction with CocoaPods &amp;ndash; it had been around for long enough to work pretty well and be reasonably well respected in the wider community, but was still new enough to be exciting to work on. Of course, around that time, Carthage was released, and since we&amp;rsquo;ve seen the ecosystem fragmented even further with Swift Package Manager.&lt;/p&gt;

&lt;p&gt;I was working full-time on CocoaPods courtesy of Stripe, and spent the majority of my time implementing a new dependency resolver. Called Molinillo, it&amp;rsquo;s now in use by both Bundler and RubyGems, in addition to CocoaPods. The new resolver was actually my first attempted contribution to CocoaPods right after the bug bash, and was at the top of the list of must-have features.&lt;/p&gt;

&lt;p&gt;Of course, at the time we knew that the immediate future would be dominated by adding framework and Swift support. Little did we know that would turn into a many-months project, led by Marius Rackwitz, that spawned further months of improvements and bug fixes. Without the introduction of Swift, CocoaPods could have reasonably hit 1.0 in the fall of 2014.&lt;/p&gt;

&lt;p&gt;When we finally got Swift shipped and had addressed most of the outstanding bugs, it was almost WWDC time. That meant we&amp;rsquo;d have to be mad to ship 1.0 for 4 months, as we waited to hear what changes to Xcode Apple were making, and figure out the ways we&amp;rsquo;d have to adapt CocoaPods to them.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d gotten to the point where the last real blocker for the 1.0 release was a new Podfile DSL &amp;ndash; there were issues dating back at least three years about problems that would be solved once we came up with this mythical new DSL.&lt;/p&gt;

&lt;p&gt;I started working on the new DSL right before my talk at iOS DevCampDC at the beginning of September. By the time the conference finished, some tests in CocoaPods Core were by to passing. By the time my delayed flight landed in New York, I&amp;rsquo;d ripped out a lot of how the DSL created targets and had the skeleton of the new one working.&lt;/p&gt;

&lt;p&gt;And then when Xcode 7 was out, I was on the road without a laptop, moving from San Francisco back to Chicago. I was answering issues on my phone in the passengers seat on a 2,500 mile drive, but without any way to run tests, I couldn&amp;rsquo;t realistically write code.&lt;/p&gt;

&lt;p&gt;Back in Chicago, I finalized a sponsorship agreement with Capital One, whereby they would support my work on CocoaPods. But my focus remained on triaging issues and trying to whittle down the endless backlog of things we wanted to change about CocoaPods.&lt;/p&gt;

&lt;p&gt;Early in October, I released 0.39 and said it would be the last version of CocoaPods pre-1.0. By then, there was no turning back. I was committed to finally getting 1.0 released, no matter what it took &amp;ndash; it became a point of pride for me more than anything practical at that point, I think.&lt;/p&gt;

&lt;p&gt;I finished up a new linter that verified pods would actually be importable. I implemented change tracking in Xcodeproj. We made &lt;code&gt;cocoapods-deintegrate&lt;/code&gt; a default plugin and got CocoaPods to better clean up after itself (which was necessary in wake of the changes to come).&lt;/p&gt;

&lt;p&gt;One morning, I made &lt;code&gt;pod install&lt;/code&gt; a few times faster before going to class. Another evening, the linter became aware of &lt;code&gt;header_mappings_dir&lt;/code&gt;. And so the fall quarter marched on. But I didn&amp;rsquo;t have the heart to tackle the new DSL yet.&lt;/p&gt;

&lt;p&gt;By the time finals week rolled around, I had run out of issue to procrastinate on. I spent my 21st birthday in the library, rebasing my work on the Podfile DSL.&lt;/p&gt;

&lt;p&gt;After taking nearly two weeks off due to a temporary relocation to San Fransisco (and the following cross-country drive back to New York), I arrived back at my dad&amp;rsquo;s house with less than two weeks left to finish 1.0 in order to hit my self-imposed deadline.&lt;/p&gt;

&lt;p&gt;There were maybe five or six days in a row where I stayed up until four or five a.m., implementing all of the final parts of the new DSL. Installation options in the Podfile. Target inheritance. Abstract targets. All of these features (and quite a bit more) were written long after everyone else had gone to sleep. I must&amp;rsquo;ve been the only one using the hotel wifi in Sturbridge, MA when I finally went to bed.&lt;/p&gt;

&lt;p&gt;I live-streamed me releasing CocoaPods 1.0.0.beta.1, even though it took two and a half hours. I beat the deadline with a day to spare. CocoaPods 1.0 was a reality.&lt;/p&gt;

&lt;p&gt;The 1.0 betas somehow managed to span four and a half months, and ended up encompassing even more changes than the first beta did. But the beta process forced us to polish CocoaPods even more, and I&amp;rsquo;m thankful we were able to make all of those changes before 1.0, rather than after.&lt;/p&gt;

&lt;p&gt;By beta 5, which shipped in the beginning of March, we were finally happy with how the release was shaping up. In Slack, we were talking about when to ship the first release candidate, and I was throwing around the idea of doing the final release with Eloy, when I was in Amsterdam later than month.&lt;/p&gt;

&lt;p&gt;But then came Shallowgate. By the next week, we&amp;rsquo;d make another set of breaking changing to reduce CocoaPods&amp;rsquo; demand on GitHub&amp;rsquo;s servers. It turns out we had a lot of users cloning the master specs repo, and because of the fact we used shallow clones, each fetch was hugely expensive on GitHub&amp;rsquo;s end.&lt;/p&gt;

&lt;p&gt;Danielle, Marius, and myself spent that week making sure we would no longer perform shallow clones, and reduce the number of fetches we would be making from GitHub in the first place.&lt;/p&gt;

&lt;p&gt;After beta 6 shipped those fixes and we had a roadmap for the rest of the response to Shallowgate, I was exhausted. Finals week had come around again, and development and studying were both competing for my time. At the suggestion that we maybe should backport these fixes to 0.39, I lost it, and quickly realized I needed to take a break from working on open source.&lt;/p&gt;

&lt;p&gt;And so began a two and a half week hiatus from GitHub. After finals and spring break, I went back to school and prepared CocoaPods to be able to handle a &amp;#39;sharded&amp;rsquo; master specs repo to allow CocoaPods to continue to use GitHub for the master specs repo.&lt;/p&gt;

&lt;p&gt;Orta and I hopped on a Hangout to talk about a release schedule. We decided on a Tuesday, 8am San Fransisco time (a lesson in reaching the widest possible developer audience I learned from Realm). Two RCs and a final release, at least five days apart each. So professional!&lt;/p&gt;

&lt;p&gt;Despite all the challenges of the past few months, all of the anger and frustration and setbacks, we had a date. May 10, 2016. I had four pairs of CocoaPods socks. I bought a celebratory bottle of beer from Dogfish Head.&lt;/p&gt;

&lt;p&gt;I wrote a blog post and tried not to be too self-congratulatory. We told the team that there was a feature freeze and that 1.0 was on the brink of existence.&lt;/p&gt;

&lt;p&gt;And then the day came. I used my fancy new &lt;code&gt;super_release&lt;/code&gt; task on every single CocoaPods gem, and they all were 1.0. We pushed the blog post. We sent tweets. And I went off to Econ class.&lt;/p&gt;

&lt;p&gt;Since, we&amp;rsquo;ve shipped a bug fix release and I believe Dani is working to push version 1.1 right now, during this talk. As usual, there are a whole bunch of new features and bug fixes from the past few months.&lt;/p&gt;

&lt;p&gt;Now, our story has caught up to present day. CocoaPods has reached version 1.0 and surpassed it. Hundreds of developers have contributed tens of thousands of commits, which have touched hundreds of thousands of Xcode targets, which have in turn probably been used by a billion users. None of that is hyperbole, by the way.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been on the CocoaPods Core team for almost two and a half years. Commented on 3,499 issues. Opened 526 pull requests. Pushed 3,270 commits. Sent 29,457 Slack messages.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t even count the number of nights I&amp;rsquo;ve stayed up late writing, the lunches spent reading issues, the hours passed just thinking about CocoaPods code.&lt;/p&gt;

&lt;p&gt;I can also count the miles traversed to relocate to San Fransisco to take a grant for CocoaPods (Stripe&amp;rsquo;s open source retreat, which resulted in Molinillo): approximately 5,500 miles. I can count the years of school missed to work full-time: 1.&lt;/p&gt;

&lt;p&gt;All of this to say &amp;ndash; it&amp;rsquo;s been an incredible journey working on CocoaPods. Before 1.0, during, and after. But like all journeys, this one must too come to an end.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve loved working on CocoaPods. But there are only so many passive-aggressive issues, snarky tweets, and late nights putting out fires that one person can take.&lt;/p&gt;

&lt;p&gt;So, effective today, I&amp;rsquo;m going to step down from running the project. I&amp;rsquo;m still going to be around, but its time to let others pick up the mantle. I will continue working on CocoaPods, but will go back to building the things that I find fun and interesting, rather than what others want me to do.&lt;/p&gt;

&lt;p&gt;CocoaPods has been a huge part of my life since joining the project in April 2014, but the time has come for me to try working on other things. I have a few CocoaPods-related projects in the works, and don&amp;rsquo;t plan on stopping completely any time soon, but the days of me answering every GitHub issue filed against a CocoaPods repo are over.&lt;/p&gt;

&lt;p&gt;I accomplished what I set out to do. I wrote features and fixed bugs that have touched tens of thousands of developers, and I&amp;rsquo;m incredibly humbled by the opportunity that the rest of the CocoaPods team, and all of our users, have given me. I&amp;rsquo;m so happy to see how CocoaPods has grown, and I&amp;rsquo;m happy to have been able to contribute.&lt;/p&gt;

&lt;p&gt;And most of all, I shipped CocoaPods 1.0.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Winding Road of European History</title>
    <link rel="alternate" href="http://blog.segiddins.me/2016/02/01/winding-road-of-european-history/"/>
    <id>http://blog.segiddins.me/2016/02/01/winding-road-of-european-history/</id>
    <published>2016-02-01T16:45:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;This was my final paper for my European Civilizations class, discussing what
I learned over the the course of the quarter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is very tempting to view the history of European civilization as a
relentless progression towards a perfect society. This temptation is
particularly strong for those of us here in the United States, a nation
whose own founding document begins, “We the People of the United States,
in Order to form a more perfect Union…do ordain and establish this
Constitution for the United States of America.” This ‘more perfect
union’ is envisioned as the natural successor an uninterrupted line of
societies dating back to biblical times, from Moses to Jesus to Rome,
through to modern Europe and across the Atlantic to the New World. This
view, however, is not an accurate assessment of ‘how we got here today’,
since it ignores the very parts of history that were responsible for
shaping the meaning of a ‘civilized European society’.&lt;/p&gt;



&lt;p&gt;The landmark events in European history cannot be viewed as singular
turning points, but rather as culminations of centuries of tension,
stretched to breaking point. Take, for example, the Protestant
Reformation. It destroyed the last vestiges of the Christian European
empire that had existed, more or less, since the age of Constantine. For
the adherents to the Roman Church after the Reformation had run its
course, it would be known as a terrible schism. But this view of history
ignores the fact that the Church had been snuffing out heresy all
throughout the continent for several centuries before the schism, and
there were even those who the Church agreed with that held ideologies
remarkably similar to that of the successful reformers, such as Martin
Luther.&lt;/p&gt;

&lt;p&gt;While thinkers try to distinguish between heretics and schismatics, with
enough hindsight we’re led to question whether the true distinction
might not be one of ideology, but rather an &lt;em&gt;ex post facto&lt;/em&gt; judgment of
success. The line separating heretics from schismatics from saints and
prophets is razor-thin, and certainly more bent than straight. Even
Peter Abelard, held as the founder of the field of Theology, was accused
by the Church of heresy. If he had not been acquitted by trial, he
likely would be but another entry in the Catholic Church’s extensive
archives of persecution, rather than being accepted as a visionary and a
scholar worth reading a millennium after his life. To Protestants,
Martin Luther is likewise revered, but to Catholics at the time his
views were anathema – the response to the same words he published
differed vastly depending on who was asked, and when.&lt;/p&gt;

&lt;p&gt;The enmeshment of classical and biblical philosophy is another example
we encountered of the tale of European civilization being collapsed down
to the seminal moments. Christianity had existed in Pagan Rome for
nearly four centuries before St. Augustine penned his &lt;em&gt;Confessions&lt;/em&gt; or
his treatise on &lt;em&gt;The City of God&lt;/em&gt;, yet Augustine is the single person
credited with allowing the two traditions to co-exist. We’re supposed to
accept that, all of a sudden, a great reconciliation occurred. Of
course, in the time preceding that union, there existed two competing
theological traditions in the empire – competing in the sense that they
offered two explanations for how their adherents ought to behave. Their
compatibility was not inherent, but rather one of acceptance – the
ideologies could only safely co-exist once the &lt;em&gt;apparent&lt;/em&gt; cognitive
dissonance had been resolved.&lt;/p&gt;

&lt;p&gt;The notion that “history is written by the victor” seems to govern much
of our understanding of European history. Imagine that the Ottomans had
successfully invaded the Italian peninsula in the sixteenth century, or
if they defeated the Habsburgs in Eastern Europe. They certainly would
not be remembered as `the infidel`, and the crusader knights who
fought them would not be celebrated as saints. As facts cannot be
contingent upon any kind of &lt;em&gt;ex-post facto&lt;/em&gt; investigation, we must
accept that our interpretation of &lt;em&gt;mere&lt;/em&gt; facts is insufficient to
explain the historical realities that are under investigation. Also the
words on the page might not change, their meaning certainly shifts over
time – and that can be misleading when attempting to understand the way
the world was at the time they were originally written, published, and
responded to.&lt;/p&gt;

&lt;p&gt;Another oft-misremembered figure we encountered in the class was King
John, whom we grappled with as the issuer of the Magna Carta and
challenger to Pope Innocent III. While his incompetence certainly has
not been forgotten by modern history, he is (incorrectly) granted
posthumous credit for issuing the Magna Carta, which is today remembered
as the first ‘Bill of Rights’, although the promises it made were never
intended to be fulfilled and indeed the entire charter was nullified by
the Pope. In addition to the sociological content of the document, its
examination is revealing about what was needed to satiate angry medieval
barons, as it represents the ultimate capitulation to the power of the
non-princely nobility at the time. Indeed, it was so extreme that the
Pope felt compelled to nullify it, lest it serve as an example to the
nobility in other principates – the threat it represented not only to
the King’s power, but also the churches, was very real.&lt;/p&gt;

&lt;p&gt;I personally believe that all of this managed to surprise me (and thus
provide an opportunity to learn) because we have a tendency to ascribe
simplified statements and motives to historical figures that gloss over
the vast majority of their works. For example, though John Locke makes
an argument for religious toleration (and his notions of liberty form
the basis for a lot of modern philosophy on the subject), he excludes
toleration for ‘atheists’ and those who swear allegiance to a theocratic
leader of different faiths (Muslims, specifically). Thus, Locke’s notion
of toleration is far more narrow than is accepted today – essentially,
Locke only believed those who are Christian (and almost certainly
limited to those holding Protestant beliefs) could be entrusted to form
the bedrock of a stable society. By examining the rest of the text,
however, one can discover that, at the time, it was unfathomable that a
sane person would choose to refute the existence of God – when Locke
says ‘atheist’, he is really referring to what we would call a
sociopath! By delving deeper than the bullet points, we can learn that
Locke’s philosophy existed in a different context than our own, and as
such his notions of ‘toleration’ need to be interpreted as they were
when they were authored and published. Especially when trying to
understand the past, rather than derive philosophical meaning, it is
crucial to interpret writings through the lens of the ideas that were so
common that they could be left unsaid &lt;em&gt;at the time&lt;/em&gt;. An atheist today is
not the same as an atheist hundred and fifty years ago, though the word
is unchanged. This distinction is crucial, lest we mislead ourselves as
to what the past was truly like – while we can certainly learn from it
today, there are great differences that must be accounted for.&lt;/p&gt;

&lt;p&gt;All of the anecdotes above adhere to the same general form – that of
truth being sacrificed for the sake of narrative. Particularly in the
west, we frequently rewrite the history of ourselves to conform with the
story we wish to tell of who we are. If we currently believe the purpose
of a state coincides with the Lockean conception thereof, we can weave a
tale such that Locke’s thinking appears to be a foregone conclusion –
and in that manner, we lose the context that made his writings so
meaningful. For documents that have survived hundreds of years, many of
the important conclusions we can draw rely on understanding what was
&lt;em&gt;not&lt;/em&gt; said, what could have been taken for granted at the time, as well
as what made the document worth penning in the first place. Locke’s
&lt;em&gt;Letter Concerning Toleration&lt;/em&gt; and John of Viterbo’s &lt;em&gt;On the Government
of Cities&lt;/em&gt; in particular need to be understood within a broader
historical context, and ironically the easiest way to understand the
‘full story’ is to return to the entirety of the texts, rather than the
snippets that are convenient to quote, say when authoring a paper.&lt;/p&gt;

&lt;p&gt;The danger I’ve constantly had to steer myself away from is that of
viewing the history of European society with a diachronic lens – of
viewing it as the product of itself and itself alone. European history
of course has been shaped by natural events, by interactions with
outside societies, and most of all by coincidence. If religions seek to
provide answers for the things we cannot know, history must exist to
explain to us &lt;em&gt;how&lt;/em&gt; the present emerged – not as a parable or the
culmination of a divine creator, but as the fusion of the actions of
society, its neighbors, and nature. It is only in that most complete
context that &lt;em&gt;history&lt;/em&gt; becomes visible – a collection of facts that
reveals truth, rather than a narrative.&lt;/p&gt;

&lt;p&gt;Perhaps the greatest lesson I’ve learned from this class can be
distilled to the notion that the line between being repressed by the
establishment and reforming it is very fine indeed. Furthermore, where
an even or individual lies with respect to that line can only be
determined in hindsight, as ultimate success in challenging the
prevailing theology and politics is demonstrated to &lt;em&gt;not&lt;/em&gt; be a product
of an ideology’s validity, but rather one of historical fact. This runs
entirely counter to any notion of Western exceptionalism or
inevitability I had held previously – if the ideas we take for granted
now have gone in and out of vogue, then we can’t presume that they are
the ‘natural’ culmination of our history, but rather that it is luck
that they are what we accept and adhere to today. If all that separates
heroes and heretics is timing, then it is the peculiarities of our
timeline that are to thank for our present condition, rather than
anything inherent in us as a people.&lt;/p&gt;

&lt;p&gt;As I said in my statement at the start of term, I’m a firm believer that
this sort of true understanding is absolutely &lt;em&gt;crucial&lt;/em&gt; if we are to
avoid repeating the mistakes of the past. At a time of growing
discontent, where fiery rhetoric has become the norm and people are
questioning the very principles upon which our society has been founded,
we can find solace in knowing “this has happened before”, and wisdom
from examining the past. By discarding the comforting stories we tell
about ourselves and delving into the contextualized realities of
history, we might find guidance as we leave behind a history of our own.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Behind the Curtain</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/08/31/behind-the-curtain/"/>
    <id>http://blog.segiddins.me/2015/08/31/behind-the-curtain/</id>
    <published>2015-08-31T17:45:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Some people are just born to be on stage. They thrive when the bright lights are bright and focused on them. They draw their energy and motivation from all the eyes upon them. I&amp;rsquo;m not one of those people. I prefer it when I&amp;rsquo;m doing everything behind the curtain &amp;ndash; that&amp;rsquo;s not to say I don&amp;rsquo;t thrive under pressure or anything, but I do my best work when nobody&amp;rsquo;s looking directly at me. When there are no expectations.&lt;/p&gt;



&lt;p&gt;One of my favorite things about starting on a new project is that nobody is expecting anything of you. If you end up making absolute garbage, it doesn&amp;rsquo;t matter. You can just not push the publish button, and the world need not know of your unsatisfactory work.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t quite so for me at the moment, and it&amp;rsquo;s been a massive source of stress for me over the past couple of weeks. As I&amp;rsquo;m sure pretty much everyone knows, in addition to my day job at Realm, I&amp;rsquo;m a core team member on both CocoaPods and Bundler. Lately, I&amp;rsquo;ve felt a lot more inclined to hack on Bundler than CocoaPods in my spare time.&lt;/p&gt;

&lt;p&gt;And I think it comes down to me not liking other people having expectations of me. When there are expectations, it&amp;rsquo;s so hard to feel like you&amp;rsquo;re a success. Even if you do something amazing, if it&amp;rsquo;s been expected of you, you feel like you&amp;rsquo;ve accomplished &lt;em&gt;nothing&lt;/em&gt;. If, however, you present the work out of the blue, everyone speaks their gratitude, and you get recognized for having done something wonderful. Same work. Different expectations. Guess which one makes you feel better?&lt;/p&gt;

&lt;p&gt;I love working on Bundler because I know that &lt;a href="https://twitter.com/indirect"&gt;André&lt;/a&gt; will keep things running smoothly, and that any contributions I make will just be adding forward momentum. On CocoaPods, however, &lt;em&gt;I&amp;rsquo;m&lt;/em&gt; the one who&amp;rsquo;s making sure the wheels keep on turning. If I go a week without a commit, it&amp;rsquo;s out of the ordinary, and I feel like I&amp;rsquo;m letting the rest of the team, and all of our users down.&lt;/p&gt;

&lt;p&gt;I want to go back to being the proverbial man behind the curtain, the eccentric designer that the audience need not know about, that there are no expectations. That my contributions are not taken for granted, but rather are a nice surprise.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Day After</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/08/30/the-day-after/"/>
    <id>http://blog.segiddins.me/2015/08/30/the-day-after/</id>
    <published>2015-08-30T07:35:00Z</published>
    <updated>2020-12-23T09:55:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The day after is always really hard for me. I have a great day, go to sleep with a smile on my face, and then wake up. And I wake up with absolutely no motivation to go out and experience the new day.&lt;/p&gt;



&lt;p&gt;On Friday night, I went to the &lt;a href="https://en.wikipedia.org/wiki/Paramount_Theatre_(Oakland,_California)"&gt;Paramount&lt;/a&gt; in Oakland to see &lt;a href="https://en.wikipedia.org/wiki/Some_Like_It_Hot"&gt;Some Like it Hot&lt;/a&gt;. I went with a friend I&amp;rsquo;d made a few months ago out here, and a few of their college friends. To spare you the details, I had a blast. It was one of the most fun nights I&amp;rsquo;d had in a long time.&lt;/p&gt;

&lt;p&gt;And I woke up this morning, dealt with selling my desk, and didn&amp;rsquo;t leave the apartment until 9:15 PM. Why not? I&amp;rsquo;m not entirely sure, but this is a pattern I&amp;rsquo;ve noticed. Have lots of fun, and then spend the next day looking back, hoping somehow that this expenditure of my emotions will be able to prevent the fleeting sands of yesterday from slipping out of my grasp. As if I could will the past to be bottled up, etched into a record I could replay on a day such as today, when feeling that the future would be best if it were just a re-run of yesterday. Because yesterday was pretty nearly perfect.&lt;/p&gt;

&lt;p&gt;I suppose the thing I really want is for day &lt;em&gt;N + 1&lt;/em&gt; to surpass day &lt;em&gt;N&lt;/em&gt;, &lt;em&gt;ad infinitum&lt;/em&gt;. But that&amp;rsquo;s obviously not possible. But I would love to have two of these great days in a row. And then try stretching it out to three. Then four. Until, some day, I don&amp;rsquo;t have to fear that a great day will just lead to a letdown. Some day.&lt;/p&gt;
</content>
  </entry>
</feed>
