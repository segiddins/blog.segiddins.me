<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title/>
  <subtitle/>
  <id>http://blog.segiddins.me/</id>
  <link href="http://blog.segiddins.me/"/>
  <link href="http://blog.segiddins.me/rss" rel="self"/>
  <updated>2015-04-13T17:30:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>1 Year of CocoaPods</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/04/13/1-year-of-cocoapods/"/>
    <id>http://blog.segiddins.me/2015/04/13/1-year-of-cocoapods/</id>
    <published>2015-04-13T17:30:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A year ago today, I made my first serious attempt at contributing to CocoaPods. Little would I know that a late Saturday night (that quickly turned into Sunday morning after I returned from a party) spent hacking on some Ruby would forever change the course of history. Well, maybe not &lt;em&gt;history&lt;/em&gt;, but certainly my own story, and that of CocoaPods.&lt;/p&gt;



&lt;p&gt;I’ve been a &lt;a href="https://cocoapods.org"&gt;CocoaPods&lt;/a&gt; user since the spring of 2013, my &lt;a href="https://github.com/segiddins/RandomRainbow"&gt;formative days as an iOS developer&lt;/a&gt;, before I even knew how to write a coherent program in Ruby. I couldn’t tell you who had written CocoaPods, whether it was sponsored by a corporation, or whether it would be around in a year, but from day 1 I was heavily indebted to it. I wouldn&amp;rsquo;t hesitate to say that, without CocoaPods, I could not have made it as an iOS developer.&lt;/p&gt;

&lt;p&gt;The first time I was ever forced to consider the idea that CocoaPods was a concrete thing, a human production, was when I saw the announcement on the CocoaPods blog of the &lt;a href="http://blog.cocoapods.org/CocoaPods-Bug-Bash/"&gt;Bug Bash&lt;/a&gt;. It was set for my last day of my very first college spring break, but I didn’t have anything better to do (I had been sidelined by two removed wisdom teeth earlier in the week), so I hopped on Metro North towards Manhattan, and Artsy HQ.&lt;/p&gt;

&lt;p&gt;Not knowing whom I would meet, I took the elevator up to the 27th floor, and was promptly greeted by &lt;a href="https://twitter.com/orta"&gt;Orta&lt;/a&gt;. I sat down next to maybe five or six other people, and proceeded to triage issues. If memory serves, I had attended to the second-most issues that weekend, after &lt;a href="https://twitter.com/neonacho"&gt;Boris&lt;/a&gt; (hence his nickname, the &lt;a href="https://cocoapods.org/about#team"&gt;Triagemaster General&lt;/a&gt;). I tried making &lt;a href="https://github.com/CocoaPods/CocoaPods/pull/1948"&gt;one small fix to the specs&lt;/a&gt;, but it was really off-base, and I closed the pull request after a few minutes. Other than that, I had contributed no actual code to CocoaPods, but in trying to track down some of the issues, I learned a bit about CocoaPods worked internally. Even more importantly, however, I’d met Orta, along with chatting with &lt;a href="https://twitter.com/alloy"&gt;Eloy&lt;/a&gt;, Fabio, and &lt;a href="https://twitter.com/kylefuller"&gt;Kyle&lt;/a&gt; over IRC. It was a fun day, but still, it was no harbinger of the year to come. But it was a start.&lt;/p&gt;

&lt;p&gt;I returned to the University of Chicago to begin spring quarter of my first year (where I currently plan on completing a triple major). While the first week of the quarter was filled with the obligatory reading, writing, and problem sets, I couldn&amp;rsquo;t help but feel a bit bored. So, I did what every nineteen year old college student does when bored on a Saturday night: &lt;code&gt;git clone &amp;amp;&amp;amp; bundle install &amp;amp;&amp;amp; vim .&lt;/code&gt;. (Ok, maybe that isn’t the typical response, but bear with me.) I decided, in my naivety, to try and rewrite the CocoaPods dependency resolver, because I knew there was an outstanding issue to that effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/CocoaPods/CocoaPods/pull/2039"&gt;That first PR&lt;/a&gt; seemed to get peoples’ attention. I had blindly copy-pasted most of the code from Bundler’s old resolver, but I had some of the basic CocoaPods specs passing. I also got 100 comments from HoundCI, complaining (rather prematurely) about code style. Right after that, I started to seriously talk with Fabio and Eloy about what would be needed to clean up that work and get it mergeable. Days of conversation ensued, in which I didn’t make any progress on the resolver, but I did manage to sneak in about a PR a day doing small things around the different CocoaPods repos. After a couple weeks of that, I had become a member of the &lt;a href="https://cocoapods.org/about#team"&gt;core team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the end of April, Eloy pointed me towards &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;Stripe’s announcement of their open source retreat&lt;/a&gt;. I’d been working on CocoaPods less than a month, but I was the member of the team most able to drop everything and move to San Fransisco. We had no idea what my proposal would actually promise, but I began to seriously consider taking the plunge and working on CocoaPods full-time. It took a full month to convince my dad to let me take a year off, but I convinced him just before flying out to SF for &lt;a href="http://www.rubymotion.com/news/2014/07/02/rubymotion-inspect-2014-wrap-up.html"&gt;RubyMotion#inspect&lt;/a&gt; (and to meet the majority of the CocoaPods team). In between talks, Eloy and I polished up my proposal, and narrowed it down to one point: a new dependency resolver, potentially to be shared with bundler. And so I submitted the proposal right when I got back to school on May 30. (I took a redeye back and accidentally slept through both my classes that day. Oops.) I wasn’t sure what to expect. On one hand, I was affiliated with a relatively well-known project that had traction in the community. But on the other hand, I was a relative unknown, a random college student with no real track record of open source leadership.&lt;/p&gt;

&lt;p&gt;On June 3, 1:22 AM Chicago time, I heard back from Greg Brockman &amp;ndash; I was a finalist. He wanted to schedule a Skype call for later that day. We chatted for about half an hour, and I felt like I hadn’t made a total fool of myself. I settled back into nervous waiting. That night, at 7:07 PM, I had my response:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey Samuel,&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re in!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so a new chapter of my CocoaPods career began: &lt;a href="https://stripe.com/blog/open-source-retreat-grantees"&gt;I was the soon-to-be grantee&lt;/a&gt;. The night I found out happened to be the night before my last day of classes for the year, so after telling everyone and anyone I could call, I celebrated a bit in between juggling my final assignments and my last analysis p-set. I then had to go about preparing to take a year’s leave of absence while also writing papers and studying for finals (and eventually breaking up with my girlfriend).&lt;/p&gt;

&lt;p&gt;Over the summer, I was an intern on the iOS team at Tumblr. While I was using CocoaPods on a daily basis at work, development on the tool itself had ground to a halt, both from me and everyone else. I managed to get in the odd pull request or two after work, but I didn’t focus much time on CocoaPods development. That all changed the day I moved to California, September 4th. I had one weekend to acclimate myself (and find an apartment) before starting the three-month retreat at Stripe.&lt;/p&gt;

&lt;p&gt;My first day at Stripe was spent triaging upwards of 200 issues, which was an exhausting, yet incredibly productive way to start. On day two, I dug into my work on the dependency resolution algorithm. Later that week, Eloy, Kyle, and myself started to pull together the initial 0.34 release, which was a day-long Herculean effort. At the end of it, though, I finally felt like I belonged on the CocoaPods team.&lt;/p&gt;

&lt;p&gt;So I hunkered down to work on the resolver, along with general CocoaPods improvements, for a solid month and a half. Other than a little fire I had to put out while sitting in SFO, things went very smoothly. &lt;a href="https://github.com/CocoaPods/Molinillo"&gt;Molinillo&lt;/a&gt; was born and integrated into CocoaPods, tests were written, and &lt;a href="https://github.com/CocoaPods/CocoaPods/pull/2637"&gt;my integration PR&lt;/a&gt; was merged. The &lt;code&gt;segiddins&lt;/code&gt; release was a go.&lt;/p&gt;

&lt;p&gt;Since Stripe, I’ve been working at &lt;a href="http://realm.io"&gt;Realm&lt;/a&gt;. But I’ve also been writing a bunch of CocoaPods code, as well as diving head-first into both &lt;a href="https://github.com/bundler/bundler"&gt;Bundler&lt;/a&gt; and &lt;a href="https://github.com/RubyGems/RubyGems"&gt;RubyGems&lt;/a&gt;, spearheaded by Molinillo. I helped review Marius’ work bringing framework (and Swift) support to CocoaPods, along with prodding along the 0.36 release process. I built pod downloading caching and concurrent pod downloads. I’ve fixed a bunch of bugs (and introduced more than I’m proud to admit).&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;So, what does the future hold for me and CocoaPods? Right now, I don’t foresee any changes in the near future. I’ll continue working on some big stuff (the new &lt;code&gt;Podfile&lt;/code&gt; DSL comes to mind), and hacking on things behind the scenes. I couldn&amp;rsquo;t imagine not working on CocoaPods now. It’s become a huge part of my life, both professionally and personally, and I’d miss it dearly if I weren’t committing to it every week.&lt;/p&gt;

&lt;p&gt;Pod on.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My Problem With Twitter</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/02/12/my-problem-with-twitter/"/>
    <id>http://blog.segiddins.me/2015/02/12/my-problem-with-twitter/</id>
    <published>2015-02-12T17:00:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been seriously using Twitter for a bit over a year. When the service first came out, I thought it was silly &amp;ndash; why would I care what celebrities ate for lunch? Of course, that just meant that I didn’t understand the service, like so many others.&lt;/p&gt;

&lt;p&gt;In 2013, I got myself an account on &lt;a href="https://app.net"&gt;app.net&lt;/a&gt; because it was all the rage (and every podcast I listened to kept on singing its praises). None of my High School friends were on it, but I followed some people from the tech world. I even had a few conversations with &lt;a href="http://donmelton.com"&gt;Don Melton&lt;/a&gt; on ADN. After a while, I let that account lie fallow &amp;ndash; I had lost interest.&lt;/p&gt;

&lt;p&gt;Fast forward a few months to December 2014. I had just finished my first quarter of college. I was starting to take myself seriously as an iOS developer. And I, for reasons I cannot recall, started using Twitter. At first, I followed the same people I followed elsewhere on the internet. But after a while, I started to feel like I knew some of the people I was communicating with &amp;ndash; that I was one of them.&lt;/p&gt;

&lt;p&gt;That’s all well and good, but the problem is that the sort of relationship that Twitter fosters is asymmetrical. I can follow and engage with and look up to people who barely know I exist. I can see hundreds of people sharing the best moments of their lives, while I’m sitting alone on the couch in my apartment watching Netflix. My timeline gets filled with people I think I know, talking, and I can’t help but feel left out.&lt;/p&gt;

&lt;p&gt;Sure, I have &lt;em&gt;real&lt;/em&gt; friends on Twitter as well, but I’d say more than 80% of the people I interact with on the service are ‘internet friends’ or ‘internet celebrities’. You know what really knocks the wind out of your sails? When there’s someone you look up to, and you meet, and then they &lt;em&gt;don’t&lt;/em&gt; follow you on Twitter. It just screams “I don’t want to see what you have to say”. But it’s not really their fault. It’s Twitter’s. It’s mine.&lt;/p&gt;

&lt;p&gt;And there’s my problem with Twitter. It enables me to feel &lt;em&gt;terrible&lt;/em&gt; about myself for &lt;em&gt;absolutely no good reason&lt;/em&gt; &lt;strong&gt;every day&lt;/strong&gt;. Talking with people on Twitter is almost like negative social interaction &amp;ndash; it leaves you feeling more lonely than you started. And that sucks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dynamic Casting in Swift</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/01/25/dynamic-casting-in-swift/"/>
    <id>http://blog.segiddins.me/2015/01/25/dynamic-casting-in-swift/</id>
    <published>2015-01-25T19:30:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We’ve been spoiled by Objective-C’s runtime flexibility. Its tendency for dynamic dispatch, as well as a very powerful runtime (that’s exposed via both Objective-C and C APIs) has meant that dealing with arbitrary data was an easy task. You just check &lt;code&gt;[object isKindOfClass:klass]&lt;/code&gt; and accept &lt;code&gt;id&lt;/code&gt; parameters and everything works as expected.&lt;/p&gt;

&lt;p&gt;In Swift, however, we have a statically-typed language where the compiler really needs us to know types at compile-time, rather than runtime. In general, this helps us write safer code than was possible in Objective-C, but makes dealing with data this is &lt;em&gt;fundamentally untyped&lt;/em&gt; a real challenge. Swift has two operators that help to bridge the gap between static safety and the power of dynamicism: &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;It might help to pretend that those two operators are functions, so here are their function signatures:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first operator, &lt;code&gt;as&lt;/code&gt;, lets us give an object of type &lt;code&gt;T&lt;/code&gt; and tell the compiler, &amp;lsquo;no, at runtime this &lt;em&gt;really&lt;/em&gt; will be a &lt;code&gt;U&lt;/code&gt;&amp;rsquo;. This is really handy when dealing with Objective-C methods that return &lt;code&gt;id&lt;/code&gt; or Swift functions that return &lt;code&gt;AnyObject&lt;/code&gt;, but the programmer knows at compile time what their &lt;em&gt;real&lt;/em&gt; type will be.&lt;/p&gt;

&lt;p&gt;The second operator, &lt;code&gt;as?&lt;/code&gt;, is probably the more interesting of the two. &lt;code&gt;as?&lt;/code&gt; lets us write &lt;em&gt;dynamic, conditional&lt;/em&gt; code that is truly native to the static Swift world. &lt;code&gt;as?&lt;/code&gt; allows us to tell the compiler, ‘I don’t really know what this object will be at runtime, but if it happens to be of type &lt;code&gt;U&lt;/code&gt;, I want it as a type-safe object of that type. Otherwise, I’ll take &lt;code&gt;nil&lt;/code&gt;.’ This is super powerful. Imagine that we’re writing an application that consumes a REST API. The data that API returns is &lt;em&gt;fundamentally untyped&lt;/em&gt; since the compiler has absolutely no visibility into the type of data it can return. We’re interested in pulling out a &lt;code&gt;count&lt;/code&gt; property from that API response, but the &lt;code&gt;count&lt;/code&gt; property on our model needs to be of type &lt;code&gt;Int&lt;/code&gt; &amp;ndash; how do we bridge that gap? Enter &lt;code&gt;as?&lt;/code&gt;. We want to take the response’s &lt;code&gt;count&lt;/code&gt; as an &lt;code&gt;Int&lt;/code&gt;, but only if it really &lt;em&gt;is&lt;/em&gt; an &lt;code&gt;Int&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="c1"&gt;// count: Int?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can even define some syntactic sugar on top of this type verification:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;typed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;typed&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can just write:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, that last example might not look like a huge improvement, but coupled with Swift&amp;rsquo;s powerful type inference, you can &amp;#39;magically&amp;rsquo; &lt;code&gt;type&lt;/code&gt; objects at runtime with a single function call.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;id&lt;/code&gt; function can be used when passing the extracted value into a typed function:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;doubleMaybe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note that we don't have to explicitly cast to Int?&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;doubleCount2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;doubleMaybe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the best of both worlds: the ability to dynamically handle data that is out of our control, and being able to do so in a convenient way that is perfectly type-safe.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nota bene&lt;/em&gt;: So, we have these two operators that look to be &lt;em&gt;basically&lt;/em&gt; the same &amp;ndash; they only differ by one letter, after all. What’s the difference between them? Turns out, the difference is &lt;em&gt;massive&lt;/em&gt;. If we do &lt;code&gt;x as? U&lt;/code&gt;, our program (presuming it compiles) will &lt;em&gt;never&lt;/em&gt; crash &amp;ndash; you’ll get back &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is not a subtype of &lt;code&gt;U&lt;/code&gt;. On the other hand, &lt;code&gt;x as U?&lt;/code&gt; (or &lt;code&gt;x as U&lt;/code&gt;) will cause our program to segfault if &lt;code&gt;x&lt;/code&gt; is anything other than a subtype of &lt;code&gt;U?&lt;/code&gt;(or &lt;code&gt;U&lt;/code&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thanks Again, Stripe!</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/12/05/thanks-again-stripe/"/>
    <id>http://blog.segiddins.me/2014/12/05/thanks-again-stripe/</id>
    <published>2014-12-06T02:30:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today marks my last day at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;, where I’ve been working for the past three months on their &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;open source retreat&lt;/a&gt;. It’s hard to believe that it’s been a whole three months. I’ve literally never worked this long in one place before.&lt;/p&gt;



&lt;p&gt;On my first day, I had been living in California for less than a week. I knew no one who worked here, and my plans consisted of fulfilling a grant proposal. Three months later, I’ve accomplished everything I said I would: I’ve written a new &lt;a href="https://github.com/CocoaPods/Molinillo"&gt;dependency resolver&lt;/a&gt; for &lt;a href="http://cocoapods.org/"&gt;CocoaPods&lt;/a&gt;, a &lt;a href="https://github.com/CocoaPods/Resolver-Integration-Specs"&gt;language-agnostic test suite&lt;/a&gt;, and a &lt;a href="https://github.com/bundler/bundler/pull/3257"&gt;working port&lt;/a&gt; of my resolver (named Molinillo) to &lt;a href="http://bundler.io/"&gt;bundler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve also had an incredible time working out of Stripe’s office: they’ve fed me, provided excellent company, and have shown me that even big companies can have spirit and be fun places. I’ve met amazing people working here, people who have been gracious enough to share their wisdom over coffee runs and meals in the cafeteria.&lt;/p&gt;

&lt;p&gt;I have no words for how grateful I am that Stripe granted me this opportunity. Without them, I would never have been able to move to San Fransisco and live out my dream of being a professional open source developer.&lt;/p&gt;

&lt;p&gt;I must also thank my fellow CocoaPods core contributors for both encouraging me to apply for the retreat, and also helping me with my work here every step of the way.&lt;/p&gt;

&lt;p&gt;Sure, Thanksgiving might have been a week ago, but I really do want to give thanks for this once-in-a-lifetime opportunity. It was a great three months.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Realm</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/12/02/realm/"/>
    <id>http://blog.segiddins.me/2014/12/02/realm/</id>
    <published>2014-12-02T20:27:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I am so incredibly happy to announce today that I will be joining the fine folks at &lt;a href="http://realm.io"&gt;Realm&lt;/a&gt; starting on Monday. I’ll be working on building cool things there—&lt;a href="http://cocoapods.org"&gt;CocoaPods&lt;/a&gt;, &lt;a href="https://github.com/realm/jazzy"&gt;jazzy&lt;/a&gt;, and &lt;a href="https://github.com/RestKit/RestKit"&gt;RestKit&lt;/a&gt;, along with working on Realm, the database, itself.&lt;/p&gt;



&lt;p&gt;I’ve spent the past three months at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;, working full-time on CocoaPods thanks to their amazing &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;open source retreat&lt;/a&gt;. In doing so, I’ve discovered a few things. I love working on open source tooling—it’s maybe the most fun type of problem I’ve ever tried to tackle. I also miss working in the same room as my coworkers. At Realm, I get the best of both worlds: working on an amazing open source product with an incredible, world-class team.&lt;/p&gt;

&lt;p&gt;I’m going to continue working on the projects I already contribute to, and I’m sure there’ll be new projects soon enough. Realm is building some incredible technology, and I have no worries that it’ll be an interesting product to work on.&lt;/p&gt;

&lt;p&gt;I’m sad to say goodbye to Stripe. They’ve fed me well and I’ve made many wonderful friends there, but I couldn&amp;rsquo;t be more excited to begin the next period of my life at Realm.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Excelsior.&lt;/em&gt; Things just keep getting better.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Never Write Singletons</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/10/05/why-i-never-write-singletons/"/>
    <id>http://blog.segiddins.me/2014/10/05/why-i-never-write-singletons/</id>
    <published>2014-10-05T21:38:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There&amp;rsquo;s been a rash of discussion about singleton use on Twitter in the past few days, largely between &lt;a href="https://twitter.com/indragie"&gt;@indragie&lt;/a&gt; and &lt;a href="https://twitter.com/mattt"&gt;@mattt&lt;/a&gt;. I want to throw my 2¢ into the ring, squarely on the &lt;em&gt;anti-&lt;/em&gt;singeton side.&lt;/p&gt;



&lt;p&gt;I can&amp;rsquo;t stand the use of &lt;em&gt;explicit&lt;/em&gt; singletons because they make class dependency graphs hidden inside their implementations, rather than explicit via publically declared properties. In doing so, any class becomes allowed to pull in any other part of your application&amp;rsquo;s stack and use it, meaning classes will easily snake their way into all corners of your system. Take my word for it: that means &lt;strong&gt;hell&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sure, your application might not ever create more than one instance of a given class &lt;em&gt;right now&lt;/em&gt;, and sure, that instance might effectively share a lifetime in common with your application as a whole. But are those things you ever want to depend upon? &lt;strong&gt;&lt;em&gt;NO&lt;/em&gt;&lt;/strong&gt;. Use dependency injection and pass instances along to the objects that use them. Don&amp;rsquo;t do that just because it makes testing easier (it does) or because it makes your headers more descriptive (it really and truly does).&lt;/p&gt;

&lt;p&gt;Instead, avoid explicit singletons because they make your codebase &lt;em&gt;incredibly brittle&lt;/em&gt;. They couple your interaction and instantiation models in such a way that your application flow becomes assumed all over the place. They also set in stone conditions that &lt;em&gt;might&lt;/em&gt; be presently true, and ensure that it&amp;rsquo;ll be a nightmare for them to ever change.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Now, back to the title of this post: why I never &lt;em&gt;write&lt;/em&gt; singletons. Singletons are abound in the Cocoa world, but that doesn&amp;rsquo;t mean we have to treat them as singletons (everything I wrote above holds for &lt;code&gt;UIApplication&lt;/code&gt;, &lt;code&gt;NSFileManager&lt;/code&gt;, &lt;code&gt;NSNotificationCenter&lt;/code&gt;, &lt;code&gt;NSPersistantStore&lt;/code&gt;, etc.). &lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t ever write shared global accessor methods for my objects (any more), since it tempts me to presume that some random component of my application is perfectly justified in accessing a &lt;code&gt;sharedInstance&lt;/code&gt; of whatever class. That temptation is very real, but it&amp;rsquo;s a temptation that, with experience, I know is &lt;em&gt;never&lt;/em&gt; worth it.&lt;/p&gt;

&lt;p&gt;Global state is inherent in the application programming environment we use, right down to the hardware, but we never need to presume that there&amp;rsquo;s a &amp;lsquo;singleton&amp;rsquo; of anything. Imagine if the authors of schedulers said &amp;#39;oh, there will &lt;em&gt;never&lt;/em&gt; be more than one core for processes to execute on&amp;rsquo;. Probably sounded reasonable at some point, but it, of course, turned out to be a completely invalid assumption. Just create instances where appropriate and pass them along.&lt;/p&gt;

&lt;p&gt;This is definitely a case where &lt;code&gt;sharing != caring&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Class Methods</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/09/27/class-methods/"/>
    <id>http://blog.segiddins.me/2014/09/27/class-methods/</id>
    <published>2014-09-27T19:00:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Class methods, aka those declared with a &lt;code&gt;+&lt;/code&gt; in Objective-C, are horribly misused. In most languages I deal with, there is a difference between methods and functions&amp;ndash;functions are used either as a map in the mathematical sense, or to imperatively perform an action, while methods are bound to a given &amp;lsquo;receiver&amp;rsquo;, and thus the actions they expose are something the &lt;em&gt;object&lt;/em&gt; they are invoked on performs, and any map they represent is a transformation of that object into one of its properties.&lt;/p&gt;



&lt;hr&gt;

&lt;p&gt;Often times, I see classes like this:&lt;/p&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;NSObject&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;NSHTTPURLResponse&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that &lt;code&gt;+baseURL&lt;/code&gt; method? I don&amp;rsquo;t like it. It implies that the URL it returns is somehow an attribute of the &lt;code&gt;API&lt;/code&gt; &lt;em&gt;class&lt;/em&gt;, whereas that property clearly belongs on the &lt;em&gt;instance&lt;/em&gt;, as evidenced by that &lt;code&gt;@property&lt;/code&gt; declaration. By associating that method with the class, you are breaking the encapsulation of the instance.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Another abuse of class methods I&amp;rsquo;ve seen is the association of &lt;em&gt;pure&lt;/em&gt; maps with a class.&lt;/p&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;NSObject&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;hashForRequest&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSURLRequest&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt; &lt;span class="nf"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSDate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;requestTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Presumably OAuth request signing, etc.
&lt;/span&gt;&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That &lt;code&gt;+hashForRequest&lt;/code&gt; method doesn&amp;rsquo;t represent an intrinsic property of an &lt;code&gt;API&lt;/code&gt; object, nor does it represent some behavior that an &lt;code&gt;API&lt;/code&gt; object would be able to &amp;#39;customize&amp;rsquo;&amp;ndash;instead, it takes a set of given inputs, and returns an output that depends only upon those inputs. Sound familiar? It&amp;rsquo;s a function. Therefore, it should be represented in code as a function rather than a method.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;n.b.&lt;/em&gt; when a subclass would have reason to override the method, then it&amp;rsquo;s probably correct for it to be a method.)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;At the end of the day, these two misuses of class methods don&amp;rsquo;t necessarily harm a program &lt;em&gt;as originally written&lt;/em&gt;, but by improperly encapsulating data, behavior, and maps, this code structure becomes brittle. It means that the different pieces of your program aren&amp;rsquo;t where they ought to be (or where I&amp;rsquo;d expect them to be), which can lead to more detrimental issues in your codebase.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>New Frontiers</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/07/05/new-frontiers/"/>
    <id>http://blog.segiddins.me/2014/07/05/new-frontiers/</id>
    <published>2014-07-06T03:52:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Two weeks ago, I started work at &lt;a href="http://tumblr.com/"&gt;Tumblr&lt;/a&gt;. For the first time in my life, I&amp;rsquo;m working on a team. Not only am I working on a team of iOS  developers, but they are incredible. I&amp;rsquo;m really enjoying the hours that I spend at work, but there&amp;rsquo;s ultimately something missing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m one of twenty-two (I think?) interns, but none are on my team. I like all of the people I work with, but they&amp;rsquo;re all older than me, and it shows. They all have people to go back to at the end of the day; they have lives outside of work. At the moment, I don&amp;rsquo;t. I have an apartment in Little Italy, but all my friends are back in Chicago or in Scarsdale. I&amp;rsquo;m in my favorite city in the world, less than a mile and a half from the coolest office I&amp;rsquo;ve ever worked in, and yet it still feels like I&amp;rsquo;ve &lt;a href="http://blog.segiddins.me/2014/06/17/a-time-of-changes/"&gt;jumped off a cliff&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, I haven&amp;rsquo;t hit the ground yet. I don&amp;rsquo;t think I will until September, when I pack up again. And I think that&amp;rsquo;s part of the problem. I&amp;rsquo;m on my own for the first time, and I can&amp;rsquo;t even settle down because I&amp;rsquo;m uprooting again so soon. I&amp;rsquo;m incredibly excited to be facing these new frontiers, but it&amp;rsquo;s still scary. Going off the beaten path means it isn&amp;rsquo;t obvious what I should be doing. It means I don&amp;rsquo;t know who to turn to when things don&amp;rsquo;t feel right. Hell, it means I don&amp;rsquo;t even know what&amp;rsquo;s supposed to feel right. I know that, generally speaking, I&amp;rsquo;m headed in the right direction. But there are just so many new things facing me; I&amp;rsquo;m unsure of how to make all the little things fall into place.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Time of Changes</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/06/17/a-time-of-changes/"/>
    <id>http://blog.segiddins.me/2014/06/17/a-time-of-changes/</id>
    <published>2014-06-17T23:57:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Two weeks ago, I found out I was leaving college for a year.&lt;/p&gt;

&lt;p&gt;No, I&amp;rsquo;m not dropping out. No, nothing bad happened. Yes, I promise it&amp;rsquo;s an amazing thing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;tl;dr: I&amp;rsquo;m working at &lt;a href="http://tumblr.com"&gt;Tumblr&lt;/a&gt; this summer, moving to San Francisco in September to work at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt; on &lt;a href="http://cocoapods.org"&gt;CocoaPods full-time&lt;/a&gt; for three months, and in the process taking a year off of school. See &lt;a href="http://blog.cocoapods.org/Stripe-Open-Source-Retreat/"&gt;my announcement&lt;/a&gt; and &lt;a href="https://stripe.com/blog/open-source-retreat-grantees"&gt;Stripe&amp;rsquo;s&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;In less than a week, I start work at &lt;a href="http://tumblr.com"&gt;Tumblr&lt;/a&gt;, working on our awesome iOS app. I couldn&amp;rsquo;t be happier to be working with an incredible team, filled with people that I admire and trust, and generally just &lt;em&gt;like&lt;/em&gt;. Like all good things, however, it will come to an end (I say before it even begins). See, I&amp;rsquo;m only there as a sumer intern. After summer internships usually comes school. Which is where this announcement comes in: &lt;em&gt;I won&amp;rsquo;t be returning to UChicago in September&lt;/em&gt;. Instead, I&amp;rsquo;m moving to San Fransisco for a year, and will be returning to UChicago as part of the class of 2018.&lt;/p&gt;

&lt;p&gt;Let me backtrack for a moment. Back at the end of March, right before returning to Chicago for spring quarter, I went to the &lt;a href="http://blog.cocoapods.org/CocoaPods-Bug-Bash/"&gt;CocoaPods Bug Bash&lt;/a&gt; at the Artsy office in NYC. While I didn&amp;rsquo;t manage to commit any code that day, I started to see how CocoaPods worked. And I liked what I saw. I also really liked the people I interacted with, both on IRC and on the issues (and of course &lt;a href="https://twitter.com/orta"&gt;Orta&lt;/a&gt;, whom I met in person). When I got back to school, I started submitting pull requests to the various CocoaPods repos. The first one I submitted was an (all-nighter) attempt to port the &lt;a href="https://github.com/CocoaPods/CocoaPods/pull/2039"&gt;Bundler iterative resolver&lt;/a&gt; into CP. It was a failed attempt, but it got me talking with the CocoaPods Core team; it also got me contributing more and more. I think there was a two week stretch where I very nearly had a pull request a day. Needless to say, I was hooked.&lt;/p&gt;

&lt;p&gt;Not long after, I joined the Core team myself; then my friend &lt;a href="https://twitter.com/blakewatters"&gt;Blake&lt;/a&gt; pointed me towards &lt;a href="https://stripe.com"&gt;Stripe&amp;rsquo;s&lt;/a&gt; recently announced &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;Open Source Retreat&lt;/a&gt;. I joking said to the rest of the CocoaPods team that maybe I would consider applying, expecting them to laugh it off. Except they didn&amp;rsquo;t. They stood behind me 100% as I contemplated taking a leave of absence from school to work on open source software and move out to SF (which has long been a dream of mine). Whilst attending the &lt;a href="http://rubymotion.com"&gt;RubyMotion&lt;/a&gt;#inspect conference, &lt;a href="https://twitter.com/alloy"&gt;Eloy&lt;/a&gt; helped me polish up a proposal. I sent it in the last day possible, and promptly moved on to working on finals stuff, anticipating that, as a nineteen year old, I would be promptly ignored by the &lt;em&gt;real&lt;/em&gt; developers.&lt;/p&gt;

&lt;p&gt;Suffice it to say, I couldn&amp;rsquo;t have been more wrong. A mere three days after I had sent in my proposal, &lt;a href="https://twitter.com/thegdb"&gt;Greg&lt;/a&gt; let me know that I was accepted as a grantee. Holy shit. The night before my last day of classes of the year, I had found out that I wasn&amp;rsquo;t going back in September with the rest of my friends. While I was, of course, estatic at the opportunity that lays in front of me, and I wouldn&amp;rsquo;t dare ask for more, this has been a bittersweet couple of weeks for me. Last year, I wrote a bit about &lt;a href="http://blog.segiddins.me/2013/06/20/moving-on/"&gt;moving on&lt;/a&gt;, but I expected it would be several more years before I had to really do it again. I was wrong. It was three weeks short of a year since I wrote that post. I had to say goodbye to some of the most incredible friends I&amp;rsquo;ve made over the past year at UChicago, as well as leaving behind a lifestyle to which I&amp;rsquo;d adapted myself.&lt;/p&gt;

&lt;p&gt;Gone are the mid-week study breaks (the cheesy tots will be missed, Sam!), gone are the 3am nights in the Salisbury house lounge, gone are the dinnertime Foucault debates, gone are the marathon study sessions in the library, gone are the countless hours spent with some of my favorite people in the world. Instead, I&amp;rsquo;m heading out for a new adventure. I&amp;rsquo;m thrilled and exhilarated and excited, but at the same time I know that there are things that I am leaving behind. Even though I won&amp;rsquo;t be partaking in those things for the next year, however, they won&amp;rsquo;t &lt;em&gt;really&lt;/em&gt; be gone: my experience over the past year have profoundly shaped me as a person. I&amp;rsquo;m not the same Samuel that walked into Burton-Judson in September, 2013. I&amp;rsquo;d like to think that I&amp;rsquo;m now more ready for the world, that college so far has prepared me by showing me that the &amp;lsquo;life of the mind&amp;rsquo; is really a part of who I am and the life that I live.&lt;/p&gt;

&lt;p&gt;As I write this, flying from Midway to LaGuardia one last time (don&amp;rsquo;t ask why, it&amp;rsquo;s been a 2000 mile day), I am struck by an intense sense that my life is moving in the right direction. I&amp;rsquo;m embarking on an incredible journey, and I have three amazing years of college education ahead of me. I am beyond thankful for this opportunity, and also all of the unbelievable experiences that I&amp;rsquo;ve been a party to this past year. I&amp;rsquo;m at 38,000 feet, and damn if things don&amp;rsquo;t look great right now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sleuth</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/05/26/sleuth/"/>
    <id>http://blog.segiddins.me/2014/05/26/sleuth/</id>
    <published>2014-05-26T04:00:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;For the past several months, I have been working as the Lighting Designer on the &lt;a href="https://college.uchicago.edu/uttaps-present-sleuth"&gt;UT production of Sleuth&lt;/a&gt;. It was my twentieth major theatrical production, and very likely my last.&lt;/p&gt;

&lt;p&gt;I just want to thank the amazing production team for letting me go out in style. Sure, it was (at times) an incredibly stressful process, and there was an abundance of sleepless nights for us all, but in the end we put on a show that had us saying, &amp;lsquo;No fucking way they allowed us to do this.&amp;rsquo; Guess what: we did it.&lt;/p&gt;

&lt;p&gt;I got to work with an incredible director, whose vision for the show guided us through broken glasses, creepy sailor laughs, and lots of sidelight. It was a blast.
I couldn&amp;rsquo;t have done any of it without my Master Electrician. He put up with me adding crazy tower positions and using a par as a special. He wired up a desk lamp with LED strips. He helped me focus when I got behind schedule.&lt;/p&gt;

&lt;p&gt;Our actors were also a treat to work with. &lt;em&gt;UT/TAPS Presents: Brotanks&lt;/em&gt; will never be forgotten. You made a two and a half hour show entertaining, simultaneously gut-wrenching and hilarious. Even though you guys forgot lines and broke stuff, you made the show come to life.&lt;/p&gt;

&lt;p&gt;Leaving theater is bittersweet, it was always going to be. All I can say is that I couldn&amp;rsquo;t have picked a better production to end on.
Here comes one last &lt;em&gt;fade to black&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reeder 2</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/04/14/reeder-2/"/>
    <id>http://blog.segiddins.me/2014/04/14/reeder-2/</id>
    <published>2014-04-14T04:00:00+00:00</published>
    <updated>2015-05-05T03:10:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I installed the &lt;a href="http://reederapp.com/mac/"&gt;Reeder 2 for Mac Public Beta&lt;/a&gt; yesterday. When I installed it, I had over 2,000 unread news items, and this has been after months of culling my subscription list. At this moment, for the first time since I switched from Google Reader to &lt;a href="feedwrangler.net"&gt;FeedWrangler&lt;/a&gt;, I&amp;rsquo;m at 0 unread items.&lt;/p&gt;

&lt;p&gt;I sure did miss having Reader on my Mac. This weekend has felt like a great &amp;lsquo;welcome home&amp;rsquo; from one of my favorite apps.&lt;/p&gt;
</content>
  </entry>
</feed>
