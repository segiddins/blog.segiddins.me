<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title/>
  <subtitle/>
  <id>http://blog.segiddins.me/</id>
  <link href="http://blog.segiddins.me/"/>
  <link href="http://blog.segiddins.me/rss" rel="self"/>
  <updated>2015-02-12T17:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>My Problem With Twitter</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/02/12/my-problem-with-twitter/"/>
    <id>http://blog.segiddins.me/2015/02/12/my-problem-with-twitter/</id>
    <published>2015-02-12T17:00:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been seriously using Twitter for a bit over a year. When the service first came out, I thought it was silly &amp;ndash; why would I care what celebrities ate for lunch? Of course, that just meant that I didn’t understand the service, like so many others.&lt;/p&gt;

&lt;p&gt;In 2013, I got myself an account on &lt;a href="https://app.net"&gt;app.net&lt;/a&gt; because it was all the rage (and every podcast I listened to kept on singing its praises). None of my High School friends were on it, but I followed some people from the tech world. I even had a few conversations with &lt;a href="http://donmelton.com"&gt;Don Melton&lt;/a&gt; on ADN. After a while, I let that account lie fallow &amp;ndash; I had lost interest.&lt;/p&gt;

&lt;p&gt;Fast forward a few months to December 2014. I had just finished my first quarter of college. I was starting to take myself seriously as an iOS developer. And I, for reasons I cannot recall, started using Twitter. At first, I followed the same people I followed elsewhere on the internet. But after a while, I started to feel like I knew some of the people I was communicating with &amp;ndash; that I was one of them.&lt;/p&gt;

&lt;p&gt;That’s all well and good, but the problem is that the sort of relationship that Twitter fosters is asymmetrical. I can follow and engage with and look up to people who barely know I exist. I can see hundreds of people sharing the best moments of their lives, while I’m sitting alone on the couch in my apartment watching Netflix. My timeline gets filled with people I think I know, talking, and I can’t help but feel left out.&lt;/p&gt;

&lt;p&gt;Sure, I have &lt;em&gt;real&lt;/em&gt; friends on Twitter as well, but I’d say more than 80% of the people I interact with on the service are ‘internet friends’ or ‘internet celebrities’. You know what really knocks the wind out of your sails? When there’s someone you look up to, and you meet, and then they &lt;em&gt;don’t&lt;/em&gt; follow you on Twitter. It just screams “I don’t want to see what you have to say”. But it’s not really their fault. It’s Twitter’s. It’s mine.&lt;/p&gt;

&lt;p&gt;And there’s my problem with Twitter. It enables me to feel &lt;em&gt;terrible&lt;/em&gt; about myself for &lt;em&gt;absolutely no good reason&lt;/em&gt; &lt;strong&gt;every day&lt;/strong&gt;. Talking with people on Twitter is almost like negative social interaction &amp;ndash; it leaves you feeling more lonely than you started. And that sucks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dynamic Casting in Swift</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/01/25/dynamic-casting-in-swift/"/>
    <id>http://blog.segiddins.me/2015/01/25/dynamic-casting-in-swift/</id>
    <published>2015-01-25T19:30:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We’ve been spoiled by Objective-C’s runtime flexibility. Its tendency for dynamic dispatch, as well as a very powerful runtime (that’s exposed via both Objective-C and C APIs) has meant that dealing with arbitrary data was an easy task. You just check &lt;code&gt;[object isKindOfClass:klass]&lt;/code&gt; and accept &lt;code&gt;id&lt;/code&gt; parameters and everything works as expected.&lt;/p&gt;

&lt;p&gt;In Swift, however, we have a statically-typed language where the compiler really needs us to know types at compile-time, rather than runtime. In general, this helps us write safer code than was possible in Objective-C, but makes dealing with data this is &lt;em&gt;fundamentally untyped&lt;/em&gt; a real challenge. Swift has two operators that help to bridge the gap between static safety and the power of dynamicism: &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;It might help to pretend that those two operators are functions, so here are their function signatures:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first operator, &lt;code&gt;as&lt;/code&gt;, lets us give an object of type &lt;code&gt;T&lt;/code&gt; and tell the compiler, &amp;lsquo;no, at runtime this &lt;em&gt;really&lt;/em&gt; will be a &lt;code&gt;U&lt;/code&gt;&amp;rsquo;. This is really handy when dealing with Objective-C methods that return &lt;code&gt;id&lt;/code&gt; or Swift functions that return &lt;code&gt;AnyObject&lt;/code&gt;, but the programmer knows at compile time what their &lt;em&gt;real&lt;/em&gt; type will be.&lt;/p&gt;

&lt;p&gt;The second operator, &lt;code&gt;as?&lt;/code&gt;, is probably the more interesting of the two. &lt;code&gt;as?&lt;/code&gt; lets us write &lt;em&gt;dynamic, conditional&lt;/em&gt; code that is truly native to the static Swift world. &lt;code&gt;as?&lt;/code&gt; allows us to tell the compiler, ‘I don’t really know what this object will be at runtime, but if it happens to be of type &lt;code&gt;U&lt;/code&gt;, I want it as a type-safe object of that type. Otherwise, I’ll take &lt;code&gt;nil&lt;/code&gt;.’ This is super powerful. Imagine that we’re writing an application that consumes a REST API. The data that API returns is &lt;em&gt;fundamentally untyped&lt;/em&gt; since the compiler has absolutely no visibility into the type of data it can return. We’re interested in pulling out a &lt;code&gt;count&lt;/code&gt; property from that API response, but the &lt;code&gt;count&lt;/code&gt; property on our model needs to be of type &lt;code&gt;Int&lt;/code&gt; &amp;ndash; how do we bridge that gap? Enter &lt;code&gt;as?&lt;/code&gt;. We want to take the response’s &lt;code&gt;count&lt;/code&gt; as an &lt;code&gt;Int&lt;/code&gt;, but only if it really &lt;em&gt;is&lt;/em&gt; an &lt;code&gt;Int&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="c1"&gt;// count: Int?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can even define some syntactic sugar on top of this type verification:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;typed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;typed&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can just write:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, that last example might not look like a huge improvement, but coupled with Swift&amp;rsquo;s powerful type inference, you can &amp;#39;magically&amp;rsquo; &lt;code&gt;type&lt;/code&gt; objects at runtime with a single function call.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;id&lt;/code&gt; function can be used when passing the extracted value into a typed function:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;doubleMaybe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note that we don't have to explicitly cast to Int?&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;doubleCount2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;doubleMaybe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the best of both worlds: the ability to dynamically handle data that is out of our control, and being able to do so in a convenient way that is perfectly type-safe.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nota bene&lt;/em&gt;: So, we have these two operators that look to be &lt;em&gt;basically&lt;/em&gt; the same &amp;ndash; they only differ by one letter, after all. What’s the difference between them? Turns out, the difference is &lt;em&gt;massive&lt;/em&gt;. If we do &lt;code&gt;x as? U&lt;/code&gt;, our program (presuming it compiles) will &lt;em&gt;never&lt;/em&gt; crash &amp;ndash; you’ll get back &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is not a subtype of &lt;code&gt;U&lt;/code&gt;. On the other hand, &lt;code&gt;x as U?&lt;/code&gt; (or &lt;code&gt;x as U&lt;/code&gt;) will cause our program to segfault if &lt;code&gt;x&lt;/code&gt; is anything other than a subtype of &lt;code&gt;U?&lt;/code&gt;(or &lt;code&gt;U&lt;/code&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thanks Again, Stripe!</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/12/05/thanks-again-stripe/"/>
    <id>http://blog.segiddins.me/2014/12/05/thanks-again-stripe/</id>
    <published>2014-12-06T02:30:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today marks my last day at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;, where I’ve been working for the past three months on their &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;open source retreat&lt;/a&gt;. It’s hard to believe that it’s been a whole three months. I’ve literally never worked this long in one place before.&lt;/p&gt;



&lt;p&gt;On my first day, I had been living in California for less than a week. I knew no one who worked here, and my plans consisted of fulfilling a grant proposal. Three months later, I’ve accomplished everything I said I would: I’ve written a new &lt;a href="https://github.com/CocoaPods/Molinillo"&gt;dependency resolver&lt;/a&gt; for &lt;a href="http://cocoapods.org/"&gt;CocoaPods&lt;/a&gt;, a &lt;a href="https://github.com/CocoaPods/Resolver-Integration-Specs"&gt;language-agnostic test suite&lt;/a&gt;, and a &lt;a href="https://github.com/bundler/bundler/pull/3257"&gt;working port&lt;/a&gt; of my resolver (named Molinillo) to &lt;a href="http://bundler.io/"&gt;bundler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve also had an incredible time working out of Stripe’s office: they’ve fed me, provided excellent company, and have shown me that even big companies can have spirit and be fun places. I’ve met amazing people working here, people who have been gracious enough to share their wisdom over coffee runs and meals in the cafeteria.&lt;/p&gt;

&lt;p&gt;I have no words for how grateful I am that Stripe granted me this opportunity. Without them, I would never have been able to move to San Fransisco and live out my dream of being a professional open source developer.&lt;/p&gt;

&lt;p&gt;I must also thank my fellow CocoaPods core contributors for both encouraging me to apply for the retreat, and also helping me with my work here every step of the way.&lt;/p&gt;

&lt;p&gt;Sure, Thanksgiving might have been a week ago, but I really do want to give thanks for this once-in-a-lifetime opportunity. It was a great three months.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Realm</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/12/02/realm/"/>
    <id>http://blog.segiddins.me/2014/12/02/realm/</id>
    <published>2014-12-02T20:27:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I am so incredibly happy to announce today that I will be joining the fine folks at &lt;a href="http://realm.io"&gt;Realm&lt;/a&gt; starting on Monday. I’ll be working on building cool things there—&lt;a href="http://cocoapods.org"&gt;CocoaPods&lt;/a&gt;, &lt;a href="https://github.com/realm/jazzy"&gt;jazzy&lt;/a&gt;, and &lt;a href="https://github.com/RestKit/RestKit"&gt;RestKit&lt;/a&gt;, along with working on Realm, the database, itself.&lt;/p&gt;



&lt;p&gt;I’ve spent the past three months at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;, working full-time on CocoaPods thanks to their amazing &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;open source retreat&lt;/a&gt;. In doing so, I’ve discovered a few things. I love working on open source tooling—it’s maybe the most fun type of problem I’ve ever tried to tackle. I also miss working in the same room as my coworkers. At Realm, I get the best of both worlds: working on an amazing open source product with an incredible, world-class team.&lt;/p&gt;

&lt;p&gt;I’m going to continue working on the projects I already contribute to, and I’m sure there’ll be new projects soon enough. Realm is building some incredible technology, and I have no worries that it’ll be an interesting product to work on.&lt;/p&gt;

&lt;p&gt;I’m sad to say goodbye to Stripe. They’ve fed me well and I’ve made many wonderful friends there, but I couldn&amp;rsquo;t be more excited to begin the next period of my life at Realm.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Excelsior.&lt;/em&gt; Things just keep getting better.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why I Never Write Singletons</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/10/05/why-i-never-write-singletons/"/>
    <id>http://blog.segiddins.me/2014/10/05/why-i-never-write-singletons/</id>
    <published>2014-10-05T21:38:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;There&amp;rsquo;s been a rash of discussion about singleton use on Twitter in the past few days, largely between &lt;a href="https://twitter.com/indragie"&gt;@indragie&lt;/a&gt; and &lt;a href="https://twitter.com/mattt"&gt;@mattt&lt;/a&gt;. I want to throw my 2¢ into the ring, squarely on the &lt;em&gt;anti-&lt;/em&gt;singeton side.&lt;/p&gt;



&lt;p&gt;I can&amp;rsquo;t stand the use of &lt;em&gt;explicit&lt;/em&gt; singletons because they make class dependency graphs hidden inside their implementations, rather than explicit via publically declared properties. In doing so, any class becomes allowed to pull in any other part of your application&amp;rsquo;s stack and use it, meaning classes will easily snake their way into all corners of your system. Take my word for it: that means &lt;strong&gt;hell&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sure, your application might not ever create more than one instance of a given class &lt;em&gt;right now&lt;/em&gt;, and sure, that instance might effectively share a lifetime in common with your application as a whole. But are those things you ever want to depend upon? &lt;strong&gt;&lt;em&gt;NO&lt;/em&gt;&lt;/strong&gt;. Use dependency injection and pass instances along to the objects that use them. Don&amp;rsquo;t do that just because it makes testing easier (it does) or because it makes your headers more descriptive (it really and truly does).&lt;/p&gt;

&lt;p&gt;Instead, avoid explicit singletons because they make your codebase &lt;em&gt;incredibly brittle&lt;/em&gt;. They couple your interaction and instantiation models in such a way that your application flow becomes assumed all over the place. They also set in stone conditions that &lt;em&gt;might&lt;/em&gt; be presently true, and ensure that it&amp;rsquo;ll be a nightmare for them to ever change.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Now, back to the title of this post: why I never &lt;em&gt;write&lt;/em&gt; singletons. Singletons are abound in the Cocoa world, but that doesn&amp;rsquo;t mean we have to treat them as singletons (everything I wrote above holds for &lt;code&gt;UIApplication&lt;/code&gt;, &lt;code&gt;NSFileManager&lt;/code&gt;, &lt;code&gt;NSNotificationCenter&lt;/code&gt;, &lt;code&gt;NSPersistantStore&lt;/code&gt;, etc.). &lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t ever write shared global accessor methods for my objects (any more), since it tempts me to presume that some random component of my application is perfectly justified in accessing a &lt;code&gt;sharedInstance&lt;/code&gt; of whatever class. That temptation is very real, but it&amp;rsquo;s a temptation that, with experience, I know is &lt;em&gt;never&lt;/em&gt; worth it.&lt;/p&gt;

&lt;p&gt;Global state is inherent in the application programming environment we use, right down to the hardware, but we never need to presume that there&amp;rsquo;s a &amp;lsquo;singleton&amp;rsquo; of anything. Imagine if the authors of schedulers said &amp;#39;oh, there will &lt;em&gt;never&lt;/em&gt; be more than one core for processes to execute on&amp;rsquo;. Probably sounded reasonable at some point, but it, of course, turned out to be a completely invalid assumption. Just create instances where appropriate and pass them along.&lt;/p&gt;

&lt;p&gt;This is definitely a case where &lt;code&gt;sharing != caring&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Class Methods</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/09/27/class-methods/"/>
    <id>http://blog.segiddins.me/2014/09/27/class-methods/</id>
    <published>2014-09-27T19:00:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Class methods, aka those declared with a &lt;code&gt;+&lt;/code&gt; in Objective-C, are horribly misused. In most languages I deal with, there is a difference between methods and functions&amp;ndash;functions are used either as a map in the mathematical sense, or to imperatively perform an action, while methods are bound to a given &amp;lsquo;receiver&amp;rsquo;, and thus the actions they expose are something the &lt;em&gt;object&lt;/em&gt; they are invoked on performs, and any map they represent is a transformation of that object into one of its properties.&lt;/p&gt;



&lt;hr&gt;

&lt;p&gt;Often times, I see classes like this:&lt;/p&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;NSObject&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;NSHTTPURLResponse&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that &lt;code&gt;+baseURL&lt;/code&gt; method? I don&amp;rsquo;t like it. It implies that the URL it returns is somehow an attribute of the &lt;code&gt;API&lt;/code&gt; &lt;em&gt;class&lt;/em&gt;, whereas that property clearly belongs on the &lt;em&gt;instance&lt;/em&gt;, as evidenced by that &lt;code&gt;@property&lt;/code&gt; declaration. By associating that method with the class, you are breaking the encapsulation of the instance.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Another abuse of class methods I&amp;rsquo;ve seen is the association of &lt;em&gt;pure&lt;/em&gt; maps with a class.&lt;/p&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;API&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;NSObject&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;hashForRequest&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSURLRequest&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt; &lt;span class="nf"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSDate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;requestTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Presumably OAuth request signing, etc.
&lt;/span&gt;&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That &lt;code&gt;+hashForRequest&lt;/code&gt; method doesn&amp;rsquo;t represent an intrinsic property of an &lt;code&gt;API&lt;/code&gt; object, nor does it represent some behavior that an &lt;code&gt;API&lt;/code&gt; object would be able to &amp;#39;customize&amp;rsquo;&amp;ndash;instead, it takes a set of given inputs, and returns an output that depends only upon those inputs. Sound familiar? It&amp;rsquo;s a function. Therefore, it should be represented in code as a function rather than a method.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;n.b.&lt;/em&gt; when a subclass would have reason to override the method, then it&amp;rsquo;s probably correct for it to be a method.)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;At the end of the day, these two misuses of class methods don&amp;rsquo;t necessarily harm a program &lt;em&gt;as originally written&lt;/em&gt;, but by improperly encapsulating data, behavior, and maps, this code structure becomes brittle. It means that the different pieces of your program aren&amp;rsquo;t where they ought to be (or where I&amp;rsquo;d expect them to be), which can lead to more detrimental issues in your codebase.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>New Frontiers</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/07/05/new-frontiers/"/>
    <id>http://blog.segiddins.me/2014/07/05/new-frontiers/</id>
    <published>2014-07-06T03:52:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Two weeks ago, I started work at &lt;a href="http://tumblr.com/"&gt;Tumblr&lt;/a&gt;. For the first time in my life, I&amp;rsquo;m working on a team. Not only am I working on a team of iOS  developers, but they are incredible. I&amp;rsquo;m really enjoying the hours that I spend at work, but there&amp;rsquo;s ultimately something missing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m one of twenty-two (I think?) interns, but none are on my team. I like all of the people I work with, but they&amp;rsquo;re all older than me, and it shows. They all have people to go back to at the end of the day; they have lives outside of work. At the moment, I don&amp;rsquo;t. I have an apartment in Little Italy, but all my friends are back in Chicago or in Scarsdale. I&amp;rsquo;m in my favorite city in the world, less than a mile and a half from the coolest office I&amp;rsquo;ve ever worked in, and yet it still feels like I&amp;rsquo;ve &lt;a href="http://blog.segiddins.me/2014/06/17/a-time-of-changes/"&gt;jumped off a cliff&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, I haven&amp;rsquo;t hit the ground yet. I don&amp;rsquo;t think I will until September, when I pack up again. And I think that&amp;rsquo;s part of the problem. I&amp;rsquo;m on my own for the first time, and I can&amp;rsquo;t even settle down because I&amp;rsquo;m uprooting again so soon. I&amp;rsquo;m incredibly excited to be facing these new frontiers, but it&amp;rsquo;s still scary. Going off the beaten path means it isn&amp;rsquo;t obvious what I should be doing. It means I don&amp;rsquo;t know who to turn to when things don&amp;rsquo;t feel right. Hell, it means I don&amp;rsquo;t even know what&amp;rsquo;s supposed to feel right. I know that, generally speaking, I&amp;rsquo;m headed in the right direction. But there are just so many new things facing me; I&amp;rsquo;m unsure of how to make all the little things fall into place.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Time of Changes</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/06/17/a-time-of-changes/"/>
    <id>http://blog.segiddins.me/2014/06/17/a-time-of-changes/</id>
    <published>2014-06-17T23:57:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Two weeks ago, I found out I was leaving college for a year.&lt;/p&gt;

&lt;p&gt;No, I&amp;rsquo;m not dropping out. No, nothing bad happened. Yes, I promise it&amp;rsquo;s an amazing thing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;tl;dr: I&amp;rsquo;m working at &lt;a href="http://tumblr.com"&gt;Tumblr&lt;/a&gt; this summer, moving to San Francisco in September to work at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt; on &lt;a href="http://cocoapods.org"&gt;CocoaPods full-time&lt;/a&gt; for three months, and in the process taking a year off of school. See &lt;a href="http://blog.cocoapods.org/Stripe-Open-Source-Retreat/"&gt;my announcement&lt;/a&gt; and &lt;a href="https://stripe.com/blog/open-source-retreat-grantees"&gt;Stripe&amp;rsquo;s&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;In less than a week, I start work at &lt;a href="http://tumblr.com"&gt;Tumblr&lt;/a&gt;, working on our awesome iOS app. I couldn&amp;rsquo;t be happier to be working with an incredible team, filled with people that I admire and trust, and generally just &lt;em&gt;like&lt;/em&gt;. Like all good things, however, it will come to an end (I say before it even begins). See, I&amp;rsquo;m only there as a sumer intern. After summer internships usually comes school. Which is where this announcement comes in: &lt;em&gt;I won&amp;rsquo;t be returning to UChicago in September&lt;/em&gt;. Instead, I&amp;rsquo;m moving to San Fransisco for a year, and will be returning to UChicago as part of the class of 2018.&lt;/p&gt;

&lt;p&gt;Let me backtrack for a moment. Back at the end of March, right before returning to Chicago for spring quarter, I went to the &lt;a href="http://blog.cocoapods.org/CocoaPods-Bug-Bash/"&gt;CocoaPods Bug Bash&lt;/a&gt; at the Artsy office in NYC. While I didn&amp;rsquo;t manage to commit any code that day, I started to see how CocoaPods worked. And I liked what I saw. I also really liked the people I interacted with, both on IRC and on the issues (and of course &lt;a href="https://twitter.com/orta"&gt;Orta&lt;/a&gt;, whom I met in person). When I got back to school, I started submitting pull requests to the various CocoaPods repos. The first one I submitted was an (all-nighter) attempt to port the &lt;a href="https://github.com/CocoaPods/CocoaPods/pull/2039"&gt;Bundler iterative resolver&lt;/a&gt; into CP. It was a failed attempt, but it got me talking with the CocoaPods Core team; it also got me contributing more and more. I think there was a two week stretch where I very nearly had a pull request a day. Needless to say, I was hooked.&lt;/p&gt;

&lt;p&gt;Not long after, I joined the Core team myself; then my friend &lt;a href="https://twitter.com/blakewatters"&gt;Blake&lt;/a&gt; pointed me towards &lt;a href="https://stripe.com"&gt;Stripe&amp;rsquo;s&lt;/a&gt; recently announced &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;Open Source Retreat&lt;/a&gt;. I joking said to the rest of the CocoaPods team that maybe I would consider applying, expecting them to laugh it off. Except they didn&amp;rsquo;t. They stood behind me 100% as I contemplated taking a leave of absence from school to work on open source software and move out to SF (which has long been a dream of mine). Whilst attending the &lt;a href="http://rubymotion.com"&gt;RubyMotion&lt;/a&gt;#inspect conference, &lt;a href="https://twitter.com/alloy"&gt;Eloy&lt;/a&gt; helped me polish up a proposal. I sent it in the last day possible, and promptly moved on to working on finals stuff, anticipating that, as a nineteen year old, I would be promptly ignored by the &lt;em&gt;real&lt;/em&gt; developers.&lt;/p&gt;

&lt;p&gt;Suffice it to say, I couldn&amp;rsquo;t have been more wrong. A mere three days after I had sent in my proposal, &lt;a href="https://twitter.com/thegdb"&gt;Greg&lt;/a&gt; let me know that I was accepted as a grantee. Holy shit. The night before my last day of classes of the year, I had found out that I wasn&amp;rsquo;t going back in September with the rest of my friends. While I was, of course, estatic at the opportunity that lays in front of me, and I wouldn&amp;rsquo;t dare ask for more, this has been a bittersweet couple of weeks for me. Last year, I wrote a bit about &lt;a href="http://blog.segiddins.me/2013/06/20/moving-on/"&gt;moving on&lt;/a&gt;, but I expected it would be several more years before I had to really do it again. I was wrong. It was three weeks short of a year since I wrote that post. I had to say goodbye to some of the most incredible friends I&amp;rsquo;ve made over the past year at UChicago, as well as leaving behind a lifestyle to which I&amp;rsquo;d adapted myself.&lt;/p&gt;

&lt;p&gt;Gone are the mid-week study breaks (the cheesy tots will be missed, Sam!), gone are the 3am nights in the Salisbury house lounge, gone are the dinnertime Foucault debates, gone are the marathon study sessions in the library, gone are the countless hours spent with some of my favorite people in the world. Instead, I&amp;rsquo;m heading out for a new adventure. I&amp;rsquo;m thrilled and exhilarated and excited, but at the same time I know that there are things that I am leaving behind. Even though I won&amp;rsquo;t be partaking in those things for the next year, however, they won&amp;rsquo;t &lt;em&gt;really&lt;/em&gt; be gone: my experience over the past year have profoundly shaped me as a person. I&amp;rsquo;m not the same Samuel that walked into Burton-Judson in September, 2013. I&amp;rsquo;d like to think that I&amp;rsquo;m now more ready for the world, that college so far has prepared me by showing me that the &amp;lsquo;life of the mind&amp;rsquo; is really a part of who I am and the life that I live.&lt;/p&gt;

&lt;p&gt;As I write this, flying from Midway to LaGuardia one last time (don&amp;rsquo;t ask why, it&amp;rsquo;s been a 2000 mile day), I am struck by an intense sense that my life is moving in the right direction. I&amp;rsquo;m embarking on an incredible journey, and I have three amazing years of college education ahead of me. I am beyond thankful for this opportunity, and also all of the unbelievable experiences that I&amp;rsquo;ve been a party to this past year. I&amp;rsquo;m at 38,000 feet, and damn if things don&amp;rsquo;t look great right now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sleuth</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/05/26/sleuth/"/>
    <id>http://blog.segiddins.me/2014/05/26/sleuth/</id>
    <published>2014-05-26T04:00:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;For the past several months, I have been working as the Lighting Designer on the &lt;a href="https://college.uchicago.edu/uttaps-present-sleuth"&gt;UT production of Sleuth&lt;/a&gt;. It was my twentieth major theatrical production, and very likely my last.&lt;/p&gt;

&lt;p&gt;I just want to thank the amazing production team for letting me go out in style. Sure, it was (at times) an incredibly stressful process, and there was an abundance of sleepless nights for us all, but in the end we put on a show that had us saying, &amp;lsquo;No fucking way they allowed us to do this.&amp;rsquo; Guess what: we did it.&lt;/p&gt;

&lt;p&gt;I got to work with an incredible director, whose vision for the show guided us through broken glasses, creepy sailor laughs, and lots of sidelight. It was a blast.
I couldn&amp;rsquo;t have done any of it without my Master Electrician. He put up with me adding crazy tower positions and using a par as a special. He wired up a desk lamp with LED strips. He helped me focus when I got behind schedule.&lt;/p&gt;

&lt;p&gt;Our actors were also a treat to work with. &lt;em&gt;UT/TAPS Presents: Brotanks&lt;/em&gt; will never be forgotten. You made a two and a half hour show entertaining, simultaneously gut-wrenching and hilarious. Even though you guys forgot lines and broke stuff, you made the show come to life.&lt;/p&gt;

&lt;p&gt;Leaving theater is bittersweet, it was always going to be. All I can say is that I couldn&amp;rsquo;t have picked a better production to end on.
Here comes one last &lt;em&gt;fade to black&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reeder 2</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/04/14/reeder-2/"/>
    <id>http://blog.segiddins.me/2014/04/14/reeder-2/</id>
    <published>2014-04-14T04:00:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I installed the &lt;a href="http://reederapp.com/mac/"&gt;Reeder 2 for Mac Public Beta&lt;/a&gt; yesterday. When I installed it, I had over 2,000 unread news items, and this has been after months of culling my subscription list. At this moment, for the first time since I switched from Google Reader to &lt;a href="feedwrangler.net"&gt;FeedWrangler&lt;/a&gt;, I&amp;rsquo;m at 0 unread items.&lt;/p&gt;

&lt;p&gt;I sure did miss having Reader on my Mac. This weekend has felt like a great &amp;lsquo;welcome home&amp;rsquo; from one of my favorite apps.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Society and the Individual in the Ethics</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/01/30/society-and-the-individual-in-the-ethics/"/>
    <id>http://blog.segiddins.me/2014/01/30/society-and-the-individual-in-the-ethics/</id>
    <published>2014-01-30T05:00:00+00:00</published>
    <updated>2015-03-16T04:42:41+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In the &lt;em&gt;Nicomachean Ethics&lt;/em&gt;, Aristotle claims that &amp;ldquo;presumably, being a good person is not in every case the same as being a good citizen&amp;rdquo; (Aristotle 1130b). Although he makes this claim, it actually runs contrary to Aristotle’s definition of &amp;lsquo;goodness&amp;rsquo; (and its attainment) as depicted throughout the &lt;em&gt;Ethics&lt;/em&gt;. It may appear from his use of two distinct terms (and the definitions he gives to differentiate them) that these are distinct categories, but in fact, virtuous citizenship may be considered the fulfillment of one&amp;rsquo;s personhood. For Aristotle, being a good human being and a good citizen are synonymous, as he conceives man to be a fundamentally social being.&lt;/p&gt;



&lt;p&gt;Aristotle offers definitions of both classifications, of “person” and “citizen,” but what is missing is the effect that living in a society has on one’s thoughts about life in society. He defines a person as human being, who possesses social capacities and the ability to reason far beyond levels observed in any animal, whereas a citizen is a free member of a society, bound by its laws and customs, and is in search of that which is good for him. In this manner, a man&amp;rsquo;s personhood is what gives him his basic capacities and appetites, but it is his citizenship that motivates him towards the good, as well as providing a solid framework under which he may both achieve the good and measure his own achievement.&lt;/p&gt;

&lt;p&gt;In discussion of virtues, the means by which man strives toward the good, Aristotle says, &amp;ldquo;Let us leave the nutritive capacity aside, since by nature it plays no role in human virtue&amp;rdquo; (Aristotle 1102b) because the nutritive capacity is one that is not unique to man, but rather &amp;ldquo;such a capacity of the soul [exists] in everything that takes in nutrition&amp;rdquo; (Aristotle 1102b). What sort of capacity can man fulfill when he is alone? Undoubtedly he would be fighting to fulfill those same nutritive capacities that Aristotle excludes from consideration in human virtue. In explaining the nature of virtue as a state, Aristotle says, &amp;ldquo;The virtue of a human being too will be the state that makes a human being good and makes him perform his characteristic activity well&amp;rdquo; (Aristotle 1106a). What, then, is man&amp;rsquo;s characteristic activity? As Aristotle tries to explain, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“If&amp;hellip; we take the characteristic activity of a human being to be a
certain kind of life; and if we take this kind of life to be activity of
the soul and actions in accordance with reason, and the characteristic
activity of the good person to be to carry this out well and nobly, and
a characteristic activity to be accomplished well when it is
accomplished in accordance with the appropriate virtue&amp;hellip; the human good
turns out to be activity of the soul in accordance with virtue&amp;quot;
(Aristotle 1098a). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, this definition of man&amp;rsquo;s characteristic activity does not seem to set out any simple metric by which we can measure that activity&amp;rsquo;s fulfillment by a person. Working backwards, from what Aristotle describes as virtuous it is possible to deduce what man&amp;rsquo;s characteristic activity might be. What aspects do the various virtues that Aristotle describes have in common? Courage, temperance, generosity, magnificence, greatness of soul, even temper, friendliness, truthfulness, wit, justice, and friendship all share a necessity in a second party, exterior to the practitioner. Thus, the existence of fellow man is essential for achieving virtue, and therefore is required for any single human to be good. Man’s characteristic activity must be the good and happiness, for those are the characteristics of a virtuous man, as a virtuous man, by his nature, is accomplished in the characteristic activities of humankind. Beyond the characteristic activities of any being, however, are the fundamental characteristics that define man’s natural dispositions.&lt;/p&gt;

&lt;p&gt;Aristotle says that man is, by nature, a &amp;#39;political animal&amp;rsquo;, and since he sees political science as the study of the good of the city, it would seem that man is a social being, one that is most at home in a society. Thus, the question that must be answered in order to determine whether, under Aristotelian ethics, there exists a distinction between a good human being and a good citizen: is there a human existence outside of society that can be virtuous? &lt;/p&gt;

&lt;p&gt;Given Aristotle&amp;rsquo;s conception of man&amp;rsquo;s fulfillment, it becomes clear that every man must live an existence within society, as society, or rather citizenship, is the characteristic activity of man. Describing virtue within the context of society, Aristotle claims, &amp;ldquo;For praise is indeed appropriate to virtue, since it makes us the kind of people to perform noble actions&amp;rdquo; (Aristotle 1101b). Here, Aristotle is drawing a link between what others think and one&amp;rsquo;s own propensity towards virtue. Note that &amp;#39;praise&amp;rsquo; does not encourage virtue, but rather &amp;#39;it makes us the kind of people&amp;rsquo; that are likely to &amp;#39;perform noble actions.&amp;rsquo; The emphasis is on the fact that praise is capable of fundamentally altering one&amp;rsquo;s disposition: the knowledge that society&amp;rsquo;s opinion is on the side of virtue causes people to become nobly-inclined. Similarly, scorn, or the threat thereof, is sufficient to redirect a man onto a course of virtue. This creates a feedback loop that is essential for society to function: citizens make each other into more virtuous men by applying praise and scorn when it is called for. In the realm of relationships, however, Aristotle positions friendship as an even stronger motivator for virtuous action.&lt;/p&gt;

&lt;p&gt;Discussing friendship, Aristotle again delineates humans from their animal counterparts by the reasons that each tends to live with others of its own species. Whereas most all animals live together merely for reproductive purposes, &amp;ldquo;human beings live together&amp;hellip; also to supply what they need for life. From the start, their characteristic activities are divided&amp;rdquo; (Aristotle 1162a), and so the characteristic activity of mankind as a whole must be the sum of each individual&amp;rsquo;s characteristic activities. Just as a man and a woman naturally have divided characteristic activities, and thus require each other in order to be virtuous in the conception of a child, so too does man in general require various partners to do good things in the other areas of human characteristic activities. In other words, living together (the enabling factor for friendship) is also what provides man with the opportunity to be virtuous. Extrapolating, the sum of man&amp;rsquo;s characteristic activities could be roughly described as citizenship, and the fulfillment of those characteristic activities as virtuous citizenship.&lt;/p&gt;

&lt;p&gt;Given this focus on citizenship, one could argue that a man could be in a society of one, a citizen in aim of only himself, and that would be sufficient for him to be able to be virtuous and happy. But Aristotle does comment that &amp;ldquo;happiness obviously needs the presence of external goods as well&amp;rdquo; (Aristotle 1099a), and these &amp;#39;external goods&amp;rsquo; (‘goods’ in the sense of good deeds, rather than objects) are found in other people. Just as praise and scorn point citizens towards virtue, so too can others enable a potential for happiness, which comes about when one has lived a virtuous life. As Aristotle admits, those with more possessions are more capable of higher forms of virtue. A poor man cannot be magnificent nor great-souled, as he does not have the means, but a wealthy or well-connected individual is capable of touching many people&amp;rsquo;s lives simultaneously. The edifices of magnificence are never built alone, but rather rely on the assistance of great multitudes of men to realize. It is in this manner that &amp;#39;external goods&amp;rsquo; can contribute to happiness, as the goods of others allow one to achieve these higher forms of virtue. Ultimately, Aristotelian virtue always entails multiple people: someone to be virtuous towards, someone to have made the object being given, or most often, both. In other words, it is impossible for a solitary man to be able to be virtuous, as his life will be consumed by mere sustenance; he will have no time to dedicate to more virtuous tasks, nor the resources to construct anything great—he would be living a nearly animal life.&lt;/p&gt;

&lt;p&gt;Although he does not delve deeply into a definition of happiness, Aristotle does outline its defining characteristics in the &lt;em&gt;Ethics&lt;/em&gt;. This outline portrays happiness as a truly human capacity and trait: it is dependent upon civilization, good fortune, and persistent choice. In the end, happiness is the first principle of the human existence, and virtue is the human means to that end. Because Aristotle does construct an ethical system under which all virtues are not considered equal, there are certain circumstances that can make attainment of happiness, the fulfillment of the human mission, nearly impossible, and almost all of those conditions are associated with solitude (such as having no one lesser to help, no previous knowledge to contemplate, etc.). In his writing, Aristotle has detailed a system under which the individual and the collective can (and must) live together harmoniously, for the one depends on the other to thrive.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Nicomachean Ethics&lt;/em&gt; details a world in which every man is intrinsically also a citizen, as there is no conception of human fulfillment that can be achieved when one is truly alone. Aristotle, much like the Thoreaus of modern times who wish to leave civilization behind, is unable to comprehend that his entire worldview is colored by the fact that he himself is a fundamentally societal creature. Even if he were to leave Athens behind and live alone in the wilderness, Aristotle would carry with him the skills and knowledge that society had impressed upon him. In that sense, his citizenship would be maintained through ingrained and indestructible ties back to society.&lt;/p&gt;

&lt;p&gt;Being members of society, we are unable to even conceive of a life that is truly solitary, because from birth we carry the marks of our society. Those marks are what distinguishes man from animal: man is continually ‘standing on the shoulders of giants,’ improving on what others have done, being habituated with lessons that ancestors had to learn the hard way. In the end, the question of whether being a good human being is separable from being a good citizen is irrelevant, for as long as a man is lives within a society, being a human being and a citizen are irreducibly the same.&lt;/p&gt;
</content>
  </entry>
</feed>
