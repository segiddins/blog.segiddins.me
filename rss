<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title/>
  <subtitle/>
  <id>http://blog.segiddins.me/</id>
  <link href="http://blog.segiddins.me/"/>
  <link href="http://blog.segiddins.me/rss" rel="self"/>
  <updated>2016-09-16T13:00:00+00:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>The Road to CocoaPods 1.0</title>
    <link rel="alternate" href="http://blog.segiddins.me/2016/09/16/road-to-cocoapods-1-0/"/>
    <id>http://blog.segiddins.me/2016/09/16/road-to-cocoapods-1-0/</id>
    <published>2016-09-16T13:00:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;This is the talk I gave at NSSpain 2016&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Road to CocoaPods 1.0&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been CocoaPods&amp;rsquo; lead developer for the past couple of years, and today I&amp;rsquo;m going to tell the story of CocoaPods 1.0.&lt;/p&gt;



&lt;p&gt;A long time ago, in a land far, far away, there was a programming language called Objective-C. It had many developers, who went into Xcode to work their trade and develop applications. They were happy they could build apps for their favorite platform.&lt;/p&gt;

&lt;p&gt;This is our &amp;ldquo;ancient history&amp;rdquo;. Our origin story.&lt;/p&gt;

&lt;p&gt;As more and more people started to build more and more applications, they realized that there are only so many different kinds of wheels that you can re-invent. And thus the third party library was born. And the developers were happy.&lt;/p&gt;

&lt;p&gt;But then, some of our ranks found that merely having libraries and frameworks wasn&amp;rsquo;t enough. They wanted a way to easily share the code they wrote, and to partake of others&amp;rsquo; code, and to build an open source community for the Cocoa world.&lt;/p&gt;

&lt;p&gt;And thus CocoaPods was born. It wasn&amp;rsquo;t created to incite flamewars on Twitter or provoke your ire when it spews out a ruby backtrace.&lt;/p&gt;

&lt;p&gt;CocoaPods was intended to be a community and a tool for everyone who worked on Cocoa apps. And judged in that light, I think it&amp;rsquo;s done marvelously.&lt;/p&gt;

&lt;p&gt;CocoaPods today is the hub for open source projects for our community &amp;ndash; a list of projects, documentation, metrics, along with the litany of tools that have been written to work with CocoaPods.&lt;/p&gt;

&lt;p&gt;For years, people would point out that CocoaPods wasn&amp;rsquo;t at version 1.0 yet. In semantic versioning terms, that meant that we weren&amp;rsquo;t promising it would be &amp;lsquo;stable&amp;rsquo;. We even had an FAQ entry explaining that CocoaPods was used in a lot of apps, even though it wasn&amp;rsquo;t yet 1.0.&lt;/p&gt;

&lt;p&gt;Even so, getting to 1.0 has been a goal from the beginning. 1.0 meant CocoaPods was ready for use in production. It meant CocoaPods would be stable. It meant that it would somehow be &amp;ldquo;done&amp;rdquo; &amp;ndash; it would do everything it had to, and do it well enough that we wouldn&amp;rsquo;t need to make breaking changes. And most of all, it&amp;rsquo;s a nice milestone to be proud of. And get lots of views on Twitter, of course!&lt;/p&gt;

&lt;p&gt;Today is actually the five-year anniversary of the first release of CocoaPods to RubyGems. Back then, it could only be run on MacRuby and wasn&amp;rsquo;t even 0.1!&lt;/p&gt;

&lt;p&gt;In the beginning, CocoaPods was rather small. Eloy manually created pod specs for a few of the most popular libraries, it generated a simple Xcode project, and you had to do the rest by hand. It&amp;rsquo;s grown a lot in the past five years. There even used to be an issue for Eloy to add tens of specs to the specs repo! (We closed it as being well and truly accomplished.)&lt;/p&gt;

&lt;p&gt;We slowly added new features and team members and web properties. Guides and CocoaDocs and a Twitter feed. Better Xcode support, the ability to specify more custom things in your Podfile and Podspec.&lt;/p&gt;

&lt;p&gt;I joined the CocoaPods team after the Bug Bash at the end of March 2014. We triaged hundreds of issues, some of which dated back to before I had ever written a line of Objective-C. And in doing so, I became intimately familiar with how CocoaPods worked, and got to know the team. I knew immediately it would be something I wanted to be a part of.&lt;/p&gt;

&lt;p&gt;We worked on shipping CocoaPods trunk and CocoaDocs 2.0 and plugin support. Things kept on chugging along, and things continued apace for several months, especially since Fabio was being paid to work on CocoaPods.&lt;/p&gt;

&lt;p&gt;For a while, we recognized that CocoaPods was rapidly changing, and justified the pre-1.0 version with the fact that we occasionally needed to make breaking changes. Users kept on discovering new ways to use CocoaPods, and thus we always had new bugs to fix, or code that needed refactoring.&lt;/p&gt;

&lt;p&gt;Following v0.34, which came out in September 2014, the idea that CocoaPods was becoming stable began to take hold. We had refactored many parts of the codebase, and changed the way files were laid out on disk. In the process, we probably broke 50% of all CocoaPods projects at some point, but at the end of that release cycle, we had a piece of software that we were reasonably happy with.&lt;/p&gt;

&lt;p&gt;That time period was also the peak of my personal satisfaction with CocoaPods &amp;ndash; it had been around for long enough to work pretty well and be reasonably well respected in the wider community, but was still new enough to be exciting to work on. Of course, around that time, Carthage was released, and since we&amp;rsquo;ve seen the ecosystem fragmented even further with Swift Package Manager.&lt;/p&gt;

&lt;p&gt;I was working full-time on CocoaPods courtesy of Stripe, and spent the majority of my time implementing a new dependency resolver. Called Molinillo, it&amp;rsquo;s now in use by both Bundler and RubyGems, in addition to CocoaPods. The new resolver was actually my first attempted contribution to CocoaPods right after the bug bash, and was at the top of the list of must-have features.&lt;/p&gt;

&lt;p&gt;Of course, at the time we knew that the immediate future would be dominated by adding framework and Swift support. Little did we know that would turn into a many-months project, led by Marius Rackwitz, that spawned further months of improvements and bug fixes. Without the introduction of Swift, CocoaPods could have reasonably hit 1.0 in the fall of 2014.&lt;/p&gt;

&lt;p&gt;When we finally got Swift shipped and had addressed most of the outstanding bugs, it was almost WWDC time. That meant we&amp;rsquo;d have to be mad to ship 1.0 for 4 months, as we waited to hear what changes to Xcode Apple were making, and figure out the ways we&amp;rsquo;d have to adapt CocoaPods to them.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d gotten to the point where the last real blocker for the 1.0 release was a new Podfile DSL &amp;ndash; there were issues dating back at least three years about problems that would be solved once we came up with this mythical new DSL.&lt;/p&gt;

&lt;p&gt;I started working on the new DSL right before my talk at iOS DevCampDC at the beginning of September. By the time the conference finished, some tests in CocoaPods Core were by to passing. By the time my delayed flight landed in New York, I&amp;rsquo;d ripped out a lot of how the DSL created targets and had the skeleton of the new one working.&lt;/p&gt;

&lt;p&gt;And then when Xcode 7 was out, I was on the road without a laptop, moving from San Francisco back to Chicago. I was answering issues on my phone in the passengers seat on a 2,500 mile drive, but without any way to run tests, I couldn&amp;rsquo;t realistically write code.&lt;/p&gt;

&lt;p&gt;Back in Chicago, I finalized a sponsorship agreement with Capital One, whereby they would support my work on CocoaPods. But my focus remained on triaging issues and trying to whittle down the endless backlog of things we wanted to change about CocoaPods.&lt;/p&gt;

&lt;p&gt;Early in October, I released 0.39 and said it would be the last version of CocoaPods pre-1.0. By then, there was no turning back. I was committed to finally getting 1.0 released, no matter what it took &amp;ndash; it became a point of pride for me more than anything practical at that point, I think.&lt;/p&gt;

&lt;p&gt;I finished up a new linter that verified pods would actually be importable. I implemented change tracking in Xcodeproj. We made &lt;code&gt;cocoapods-deintegrate&lt;/code&gt; a default plugin and got CocoaPods to better clean up after itself (which was necessary in wake of the changes to come).&lt;/p&gt;

&lt;p&gt;One morning, I made &lt;code&gt;pod install&lt;/code&gt; a few times faster before going to class. Another evening, the linter became aware of &lt;code&gt;header_mappings_dir&lt;/code&gt;. And so the fall quarter marched on. But I didn&amp;rsquo;t have the heart to tackle the new DSL yet.&lt;/p&gt;

&lt;p&gt;By the time finals week rolled around, I had run out of issue to procrastinate on. I spent my 21st birthday in the library, rebasing my work on the Podfile DSL.&lt;/p&gt;

&lt;p&gt;After taking nearly two weeks off due to a temporary relocation to San Fransisco (and the following cross-country drive back to New York), I arrived back at my dad&amp;rsquo;s house with less than two weeks left to finish 1.0 in order to hit my self-imposed deadline.&lt;/p&gt;

&lt;p&gt;There were maybe five or six days in a row where I stayed up until four or five a.m., implementing all of the final parts of the new DSL. Installation options in the Podfile. Target inheritance. Abstract targets. All of these features (and quite a bit more) were written long after everyone else had gone to sleep. I must&amp;rsquo;ve been the only one using the hotel wifi in Sturbridge, MA when I finally went to bed.&lt;/p&gt;

&lt;p&gt;I live-streamed me releasing CocoaPods 1.0.0.beta.1, even though it took two and a half hours. I beat the deadline with a day to spare. CocoaPods 1.0 was a reality.&lt;/p&gt;

&lt;p&gt;The 1.0 betas somehow managed to span four and a half months, and ended up encompassing even more changes than the first beta did. But the beta process forced us to polish CocoaPods even more, and I&amp;rsquo;m thankful we were able to make all of those changes before 1.0, rather than after.&lt;/p&gt;

&lt;p&gt;By beta 5, which shipped in the beginning of March, we were finally happy with how the release was shaping up. In Slack, we were talking about when to ship the first release candidate, and I was throwing around the idea of doing the final release with Eloy, when I was in Amsterdam later than month.&lt;/p&gt;

&lt;p&gt;But then came Shallowgate. By the next week, we&amp;rsquo;d make another set of breaking changing to reduce CocoaPods&amp;rsquo; demand on GitHub&amp;rsquo;s servers. It turns out we had a lot of users cloning the master specs repo, and because of the fact we used shallow clones, each fetch was hugely expensive on GitHub&amp;rsquo;s end.&lt;/p&gt;

&lt;p&gt;Danielle, Marius, and myself spent that week making sure we would no longer perform shallow clones, and reduce the number of fetches we would be making from GitHub in the first place.&lt;/p&gt;

&lt;p&gt;After beta 6 shipped those fixes and we had a roadmap for the rest of the response to Shallowgate, I was exhausted. Finals week had come around again, and development and studying were both competing for my time. At the suggestion that we maybe should backport these fixes to 0.39, I lost it, and quickly realized I needed to take a break from working on open source.&lt;/p&gt;

&lt;p&gt;And so began a two and a half week hiatus from GitHub. After finals and spring break, I went back to school and prepared CocoaPods to be able to handle a &amp;#39;sharded&amp;rsquo; master specs repo to allow CocoaPods to continue to use GitHub for the master specs repo.&lt;/p&gt;

&lt;p&gt;Orta and I hopped on a Hangout to talk about a release schedule. We decided on a Tuesday, 8am San Fransisco time (a lesson in reaching the widest possible developer audience I learned from Realm). Two RCs and a final release, at least five days apart each. So professional!&lt;/p&gt;

&lt;p&gt;Despite all the challenges of the past few months, all of the anger and frustration and setbacks, we had a date. May 10, 2016. I had four pairs of CocoaPods socks. I bought a celebratory bottle of beer from Dogfish Head.&lt;/p&gt;

&lt;p&gt;I wrote a blog post and tried not to be too self-congratulatory. We told the team that there was a feature freeze and that 1.0 was on the brink of existence.&lt;/p&gt;

&lt;p&gt;And then the day came. I used my fancy new &lt;code&gt;super_release&lt;/code&gt; task on every single CocoaPods gem, and they all were 1.0. We pushed the blog post. We sent tweets. And I went off to Econ class.&lt;/p&gt;

&lt;p&gt;Since, we&amp;rsquo;ve shipped a bug fix release and I believe Dani is working to push version 1.1 right now, during this talk. As usual, there are a whole bunch of new features and bug fixes from the past few months.&lt;/p&gt;

&lt;p&gt;Now, our story has caught up to present day. CocoaPods has reached version 1.0 and surpassed it. Hundreds of developers have contributed tens of thousands of commits, which have touched hundreds of thousands of Xcode targets, which have in turn probably been used by a billion users. None of that is hyperbole, by the way.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been on the CocoaPods Core team for almost two and a half years. Commented on 3,499 issues. Opened 526 pull requests. Pushed 3,270 commits. Sent 29,457 Slack messages.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t even count the number of nights I&amp;rsquo;ve stayed up late writing, the lunches spent reading issues, the hours passed just thinking about CocoaPods code.&lt;/p&gt;

&lt;p&gt;I can also count the miles traversed to relocate to San Fransisco to take a grant for CocoaPods (Stripe&amp;rsquo;s open source retreat, which resulted in Molinillo): approximately 5,500 miles. I can count the years of school missed to work full-time: 1.&lt;/p&gt;

&lt;p&gt;All of this to say &amp;ndash; it&amp;rsquo;s been an incredible journey working on CocoaPods. Before 1.0, during, and after. But like all journeys, this one must too come to an end.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve loved working on CocoaPods. But there are only so many passive-aggressive issues, snarky tweets, and late nights putting out fires that one person can take.&lt;/p&gt;

&lt;p&gt;So, effective today, I&amp;rsquo;m going to step down from running the project. I&amp;rsquo;m still going to be around, but its time to let others pick up the mantle. I will continue working on CocoaPods, but will go back to building the things that I find fun and interesting, rather than what others want me to do.&lt;/p&gt;

&lt;p&gt;CocoaPods has been a huge part of my life since joining the project in April 2014, but the time has come for me to try working on other things. I have a few CocoaPods-related projects in the works, and don&amp;rsquo;t plan on stopping completely any time soon, but the days of me answering every GitHub issue filed against a CocoaPods repo are over.&lt;/p&gt;

&lt;p&gt;I accomplished what I set out to do. I wrote features and fixed bugs that have touched tens of thousands of developers, and I&amp;rsquo;m incredibly humbled by the opportunity that the rest of the CocoaPods team, and all of our users, have given me. I&amp;rsquo;m so happy to see how CocoaPods has grown, and I&amp;rsquo;m happy to have been able to contribute.&lt;/p&gt;

&lt;p&gt;And most of all, I shipped CocoaPods 1.0.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Winding Road of European History</title>
    <link rel="alternate" href="http://blog.segiddins.me/2016/02/01/winding-road-of-european-history/"/>
    <id>http://blog.segiddins.me/2016/02/01/winding-road-of-european-history/</id>
    <published>2016-02-01T16:45:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;This was my final paper for my European Civilizations class, discussing what
I learned over the the course of the quarter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is very tempting to view the history of European civilization as a
relentless progression towards a perfect society. This temptation is
particularly strong for those of us here in the United States, a nation
whose own founding document begins, “We the People of the United States,
in Order to form a more perfect Union…do ordain and establish this
Constitution for the United States of America.” This ‘more perfect
union’ is envisioned as the natural successor an uninterrupted line of
societies dating back to biblical times, from Moses to Jesus to Rome,
through to modern Europe and across the Atlantic to the New World. This
view, however, is not an accurate assessment of ‘how we got here today’,
since it ignores the very parts of history that were responsible for
shaping the meaning of a ‘civilized European society’.&lt;/p&gt;



&lt;p&gt;The landmark events in European history cannot be viewed as singular
turning points, but rather as culminations of centuries of tension,
stretched to breaking point. Take, for example, the Protestant
Reformation. It destroyed the last vestiges of the Christian European
empire that had existed, more or less, since the age of Constantine. For
the adherents to the Roman Church after the Reformation had run its
course, it would be known as a terrible schism. But this view of history
ignores the fact that the Church had been snuffing out heresy all
throughout the continent for several centuries before the schism, and
there were even those who the Church agreed with that held ideologies
remarkably similar to that of the successful reformers, such as Martin
Luther.&lt;/p&gt;

&lt;p&gt;While thinkers try to distinguish between heretics and schismatics, with
enough hindsight we’re led to question whether the true distinction
might not be one of ideology, but rather an &lt;em&gt;ex post facto&lt;/em&gt; judgment of
success. The line separating heretics from schismatics from saints and
prophets is razor-thin, and certainly more bent than straight. Even
Peter Abelard, held as the founder of the field of Theology, was accused
by the Church of heresy. If he had not been acquitted by trial, he
likely would be but another entry in the Catholic Church’s extensive
archives of persecution, rather than being accepted as a visionary and a
scholar worth reading a millennium after his life. To Protestants,
Martin Luther is likewise revered, but to Catholics at the time his
views were anathema – the response to the same words he published
differed vastly depending on who was asked, and when.&lt;/p&gt;

&lt;p&gt;The enmeshment of classical and biblical philosophy is another example
we encountered of the tale of European civilization being collapsed down
to the seminal moments. Christianity had existed in Pagan Rome for
nearly four centuries before St. Augustine penned his &lt;em&gt;Confessions&lt;/em&gt; or
his treatise on &lt;em&gt;The City of God&lt;/em&gt;, yet Augustine is the single person
credited with allowing the two traditions to co-exist. We’re supposed to
accept that, all of a sudden, a great reconciliation occurred. Of
course, in the time preceding that union, there existed two competing
theological traditions in the empire – competing in the sense that they
offered two explanations for how their adherents ought to behave. Their
compatibility was not inherent, but rather one of acceptance – the
ideologies could only safely co-exist once the &lt;em&gt;apparent&lt;/em&gt; cognitive
dissonance had been resolved.&lt;/p&gt;

&lt;p&gt;The notion that “history is written by the victor” seems to govern much
of our understanding of European history. Imagine that the Ottomans had
successfully invaded the Italian peninsula in the sixteenth century, or
if they defeated the Habsburgs in Eastern Europe. They certainly would
not be remembered as `the infidel`, and the crusader knights who
fought them would not be celebrated as saints. As facts cannot be
contingent upon any kind of &lt;em&gt;ex-post facto&lt;/em&gt; investigation, we must
accept that our interpretation of &lt;em&gt;mere&lt;/em&gt; facts is insufficient to
explain the historical realities that are under investigation. Also the
words on the page might not change, their meaning certainly shifts over
time – and that can be misleading when attempting to understand the way
the world was at the time they were originally written, published, and
responded to.&lt;/p&gt;

&lt;p&gt;Another oft-misremembered figure we encountered in the class was King
John, whom we grappled with as the issuer of the Magna Carta and
challenger to Pope Innocent III. While his incompetence certainly has
not been forgotten by modern history, he is (incorrectly) granted
posthumous credit for issuing the Magna Carta, which is today remembered
as the first ‘Bill of Rights’, although the promises it made were never
intended to be fulfilled and indeed the entire charter was nullified by
the Pope. In addition to the sociological content of the document, its
examination is revealing about what was needed to satiate angry medieval
barons, as it represents the ultimate capitulation to the power of the
non-princely nobility at the time. Indeed, it was so extreme that the
Pope felt compelled to nullify it, lest it serve as an example to the
nobility in other principates – the threat it represented not only to
the King’s power, but also the churches, was very real.&lt;/p&gt;

&lt;p&gt;I personally believe that all of this managed to surprise me (and thus
provide an opportunity to learn) because we have a tendency to ascribe
simplified statements and motives to historical figures that gloss over
the vast majority of their works. For example, though John Locke makes
an argument for religious toleration (and his notions of liberty form
the basis for a lot of modern philosophy on the subject), he excludes
toleration for ‘atheists’ and those who swear allegiance to a theocratic
leader of different faiths (Muslims, specifically). Thus, Locke’s notion
of toleration is far more narrow than is accepted today – essentially,
Locke only believed those who are Christian (and almost certainly
limited to those holding Protestant beliefs) could be entrusted to form
the bedrock of a stable society. By examining the rest of the text,
however, one can discover that, at the time, it was unfathomable that a
sane person would choose to refute the existence of God – when Locke
says ‘atheist’, he is really referring to what we would call a
sociopath! By delving deeper than the bullet points, we can learn that
Locke’s philosophy existed in a different context than our own, and as
such his notions of ‘toleration’ need to be interpreted as they were
when they were authored and published. Especially when trying to
understand the past, rather than derive philosophical meaning, it is
crucial to interpret writings through the lens of the ideas that were so
common that they could be left unsaid &lt;em&gt;at the time&lt;/em&gt;. An atheist today is
not the same as an atheist hundred and fifty years ago, though the word
is unchanged. This distinction is crucial, lest we mislead ourselves as
to what the past was truly like – while we can certainly learn from it
today, there are great differences that must be accounted for.&lt;/p&gt;

&lt;p&gt;All of the anecdotes above adhere to the same general form – that of
truth being sacrificed for the sake of narrative. Particularly in the
west, we frequently rewrite the history of ourselves to conform with the
story we wish to tell of who we are. If we currently believe the purpose
of a state coincides with the Lockean conception thereof, we can weave a
tale such that Locke’s thinking appears to be a foregone conclusion –
and in that manner, we lose the context that made his writings so
meaningful. For documents that have survived hundreds of years, many of
the important conclusions we can draw rely on understanding what was
&lt;em&gt;not&lt;/em&gt; said, what could have been taken for granted at the time, as well
as what made the document worth penning in the first place. Locke’s
&lt;em&gt;Letter Concerning Toleration&lt;/em&gt; and John of Viterbo’s &lt;em&gt;On the Government
of Cities&lt;/em&gt; in particular need to be understood within a broader
historical context, and ironically the easiest way to understand the
‘full story’ is to return to the entirety of the texts, rather than the
snippets that are convenient to quote, say when authoring a paper.&lt;/p&gt;

&lt;p&gt;The danger I’ve constantly had to steer myself away from is that of
viewing the history of European society with a diachronic lens – of
viewing it as the product of itself and itself alone. European history
of course has been shaped by natural events, by interactions with
outside societies, and most of all by coincidence. If religions seek to
provide answers for the things we cannot know, history must exist to
explain to us &lt;em&gt;how&lt;/em&gt; the present emerged – not as a parable or the
culmination of a divine creator, but as the fusion of the actions of
society, its neighbors, and nature. It is only in that most complete
context that &lt;em&gt;history&lt;/em&gt; becomes visible – a collection of facts that
reveals truth, rather than a narrative.&lt;/p&gt;

&lt;p&gt;Perhaps the greatest lesson I’ve learned from this class can be
distilled to the notion that the line between being repressed by the
establishment and reforming it is very fine indeed. Furthermore, where
an even or individual lies with respect to that line can only be
determined in hindsight, as ultimate success in challenging the
prevailing theology and politics is demonstrated to &lt;em&gt;not&lt;/em&gt; be a product
of an ideology’s validity, but rather one of historical fact. This runs
entirely counter to any notion of Western exceptionalism or
inevitability I had held previously – if the ideas we take for granted
now have gone in and out of vogue, then we can’t presume that they are
the ‘natural’ culmination of our history, but rather that it is luck
that they are what we accept and adhere to today. If all that separates
heroes and heretics is timing, then it is the peculiarities of our
timeline that are to thank for our present condition, rather than
anything inherent in us as a people.&lt;/p&gt;

&lt;p&gt;As I said in my statement at the start of term, I’m a firm believer that
this sort of true understanding is absolutely &lt;em&gt;crucial&lt;/em&gt; if we are to
avoid repeating the mistakes of the past. At a time of growing
discontent, where fiery rhetoric has become the norm and people are
questioning the very principles upon which our society has been founded,
we can find solace in knowing “this has happened before”, and wisdom
from examining the past. By discarding the comforting stories we tell
about ourselves and delving into the contextualized realities of
history, we might find guidance as we leave behind a history of our own.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Behind the Curtain</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/08/31/behind-the-curtain/"/>
    <id>http://blog.segiddins.me/2015/08/31/behind-the-curtain/</id>
    <published>2015-08-31T17:45:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Some people are just born to be on stage. They thrive when the bright lights are bright and focused on them. They draw their energy and motivation from all the eyes upon them. I&amp;rsquo;m not one of those people. I prefer it when I&amp;rsquo;m doing everything behind the curtain &amp;ndash; that&amp;rsquo;s not to say I don&amp;rsquo;t thrive under pressure or anything, but I do my best work when nobody&amp;rsquo;s looking directly at me. When there are no expectations.&lt;/p&gt;



&lt;p&gt;One of my favorite things about starting on a new project is that nobody is expecting anything of you. If you end up making absolute garbage, it doesn&amp;rsquo;t matter. You can just not push the publish button, and the world need not know of your unsatisfactory work.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t quite so for me at the moment, and it&amp;rsquo;s been a massive source of stress for me over the past couple of weeks. As I&amp;rsquo;m sure pretty much everyone knows, in addition to my day job at Realm, I&amp;rsquo;m a core team member on both CocoaPods and Bundler. Lately, I&amp;rsquo;ve felt a lot more inclined to hack on Bundler than CocoaPods in my spare time.&lt;/p&gt;

&lt;p&gt;And I think it comes down to me not liking other people having expectations of me. When there are expectations, it&amp;rsquo;s so hard to feel like you&amp;rsquo;re a success. Even if you do something amazing, if it&amp;rsquo;s been expected of you, you feel like you&amp;rsquo;ve accomplished &lt;em&gt;nothing&lt;/em&gt;. If, however, you present the work out of the blue, everyone speaks their gratitude, and you get recognized for having done something wonderful. Same work. Different expectations. Guess which one makes you feel better?&lt;/p&gt;

&lt;p&gt;I love working on Bundler because I know that &lt;a href="https://twitter.com/indirect"&gt;André&lt;/a&gt; will keep things running smoothly, and that any contributions I make will just be adding forward momentum. On CocoaPods, however, &lt;em&gt;I&amp;rsquo;m&lt;/em&gt; the one who&amp;rsquo;s making sure the wheels keep on turning. If I go a week without a commit, it&amp;rsquo;s out of the ordinary, and I feel like I&amp;rsquo;m letting the rest of the team, and all of our users down.&lt;/p&gt;

&lt;p&gt;I want to go back to being the proverbial man behind the curtain, the eccentric designer that the audience need not know about, that there are no expectations. That my contributions are not taken for granted, but rather are a nice surprise.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Day After</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/08/30/the-day-after/"/>
    <id>http://blog.segiddins.me/2015/08/30/the-day-after/</id>
    <published>2015-08-30T07:35:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The day after is always really hard for me. I have a great day, go to sleep with a smile on my face, and then wake up. And I wake up with absolutely no motivation to go out and experience the new day.&lt;/p&gt;



&lt;p&gt;On Friday night, I went to the &lt;a href="https://en.wikipedia.org/wiki/Paramount_Theatre_(Oakland,_California)"&gt;Paramount&lt;/a&gt; in Oakland to see &lt;a href="https://en.wikipedia.org/wiki/Some_Like_It_Hot"&gt;Some Like it Hot&lt;/a&gt;. I went with a friend I&amp;rsquo;d made a few months ago out here, and a few of their college friends. To spare you the details, I had a blast. It was one of the most fun nights I&amp;rsquo;d had in a long time.&lt;/p&gt;

&lt;p&gt;And I woke up this morning, dealt with selling my desk, and didn&amp;rsquo;t leave the apartment until 9:15 PM. Why not? I&amp;rsquo;m not entirely sure, but this is a pattern I&amp;rsquo;ve noticed. Have lots of fun, and then spend the next day looking back, hoping somehow that this expenditure of my emotions will be able to prevent the fleeting sands of yesterday from slipping out of my grasp. As if I could will the past to be bottled up, etched into a record I could replay on a day such as today, when feeling that the future would be best if it were just a re-run of yesterday. Because yesterday was pretty nearly perfect.&lt;/p&gt;

&lt;p&gt;I suppose the thing I really want is for day &lt;em&gt;N + 1&lt;/em&gt; to surpass day &lt;em&gt;N&lt;/em&gt;, &lt;em&gt;ad infinitum&lt;/em&gt;. But that&amp;rsquo;s obviously not possible. But I would love to have two of these great days in a row. And then try stretching it out to three. Then four. Until, some day, I don&amp;rsquo;t have to fear that a great day will just lead to a letdown. Some day.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>An OSS Education</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/06/09/an-oss-education/"/>
    <id>http://blog.segiddins.me/2015/06/09/an-oss-education/</id>
    <published>2015-06-09T23:00:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So, as I&amp;rsquo;m sure you can see from the slide behind me, my name is Samuel Giddins.  Normally, I&amp;rsquo;d start a talk by saying where I work, and the projects I contribute to outside of work. But today, that would ruin the surprise, since I&amp;rsquo;ll be talking about how I got to be &lt;em&gt;here&lt;/em&gt;, standing on a stage at AltConf, talking to y&amp;#39;all.&lt;/p&gt;



&lt;p&gt;Before we get started, though, I want to make something clear. This is &lt;em&gt;my&lt;/em&gt; story. It&amp;rsquo;s a story of privilege. It&amp;rsquo;s a story of immense luck. It&amp;rsquo;s a &lt;em&gt;true&lt;/em&gt; story, but it&amp;rsquo;s about what has happened in &lt;em&gt;my&lt;/em&gt; programming career. &lt;/p&gt;

&lt;p&gt;That out of the way, let&amp;rsquo;s dive in! Today is June 9th, 2015. Three years ago, on this day in in 2012, I&amp;rsquo;d never built an iOS app before. I&amp;rsquo;d never written a single line of Ruby code. I was finishing up my Junior year of High School; it was the weekend before my finals started. I&amp;rsquo;m pretty sure I had a GitHub account, but I&amp;rsquo;d never used it, much less knew how to use git.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t to say I haven&amp;rsquo;t been an immense nerd since forever; I certainly have. My dad introduced me to computers eighteen years ago, when I was about two years old. A few years after that, I remember us having both a Performa and a Quadra in our basement workshop, although I&amp;rsquo;m sure I preferred playing with the trains instead of the Mac. There was then the obligatory dark age, when I had a pair of Windows towers, before coming back to the back in 10.4. I&amp;rsquo;ve been using computers literally for longer than I can remember, but learning to make them do my bidding is a rather more recent development.&lt;/p&gt;

&lt;p&gt;(See what I did there?)&lt;/p&gt;

&lt;p&gt;In fact, I didn&amp;rsquo;t start my first iOS app in earnest until November of 2012. It was the weekend before Thanksgiving. I was supposed to be writing all of my college applications. It was Saturday morning; I&amp;rsquo;d gotten up early. I had about ten hours before I needed to head to the high school to run lights for my show, and I &lt;em&gt;never&lt;/em&gt; did homework on a Saturday morning.&lt;/p&gt;

&lt;p&gt;I double-clicked on Xcode.app. Start a new project. &lt;code&gt;Umpire Clickr&lt;/code&gt;. My first app was underway. It was utterly terrible (it&amp;rsquo;s now up on GitHub at &lt;a href="https://github.com/segiddins/Clickr"&gt;https://github.com/segiddins/Clickr&lt;/a&gt; if you&amp;rsquo;re curious what a poorly-executed first app on the store looks like). But, by the time I got into the lighting booth, I was creating my developer account so I could submit it to the store.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The journey had begun.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I submitted &lt;code&gt;Clickr&lt;/code&gt; to the app store, submitted my college applications, and then circled back to do a few more iOS apps, all of which, in retrospect, have achieved the dubious status of &amp;ldquo;so bad it&amp;rsquo;s funny&amp;rdquo;. But I was hooked. Here I was, a teenager who spent more time using an iPhone than anything else, and suddenly I wasn&amp;rsquo;t constrained by &lt;em&gt;other&lt;/em&gt; people&amp;rsquo;s imaginations, only my own. Plus, figuring out how to do stuff was pretty cool. I remember a fair number of nights where I&amp;rsquo;d come home from school, code for five or six hours, and only then turning to my homework (the luxury of being a second-semester senior, I suppose).&lt;/p&gt;

&lt;p&gt;I somehow found nsscreencast.com, and started watching those. One of the first screencasts I saw was on this library called RestKit. It seemed cool, so I integrated it into one of my own projects. I was blown away that a library that powerful existed, and was free for me to use. All I had to do (after learning about CocoaPods) was run a single command, and I had this amazing tool chest at my fingers.&lt;/p&gt;

&lt;p&gt;When I got an internship (for my school&amp;rsquo;s senior options program) working on this app called Slader, I decided I wanted to use RestKit in it instead of the pre-existing mess of custom NSXMLParsers. (Yes, it was that gross. We couldn&amp;rsquo;t add new keys to any responses without breaking every existing install). But my API was XML, and the existing RestKit XML serialization layer wasn&amp;rsquo;t working for me.&lt;/p&gt;

&lt;p&gt;And so I made my first ever pull request. It couldn&amp;rsquo;t have been simpler (and it wasn&amp;rsquo;t actually accepted), but to me it was a thrill nonetheless. I was contributing to something that I had admired from afar for a few months. I was so excited, I even wrote a blog post about it. (Man, was I a nerd back then). &lt;/p&gt;

&lt;p&gt;This was May 2013. I was on the cusp on graduating from High School, and only a summer separated me from starting college at UChicago. I needed a summer internship. So naturally, I reached out to Blake Watters, the driving force behind RestKit, and basically begged him to hire me. He said no, but invited me to grab coffee one day before work. I met him, and he started showing off the integration testing suite he had for his app &amp;ndash; that was pretty darn impressive. And then we talked about the future of RestKit, and he rattled off two or three major projects that I could try and tackle. I don&amp;rsquo;t think he really expected me to, but I wanted to impress Blake. I said I&amp;rsquo;d try and prototype the new value transformation architecture he&amp;rsquo;d sketched out.&lt;/p&gt;

&lt;p&gt;So, on the train ride home that morning, my mind was buzzing with excitement. On the one hand, here was a genuine opportunity to work with a developer I looked up to. And on the other was a challenge the likes of which I&amp;rsquo;d never seen before. Suffice it to say, novice developer Samuel had never thought about &amp;ldquo;architecture&amp;rdquo; before. Much less building tooling that thousands of other developers could get their hands on. I dug in when I got home. And I was hooked.&lt;/p&gt;

&lt;p&gt;See, basically nobody used the apps I&amp;rsquo;d built. But RestKit was something that a lot of people depended upon. I love making the &amp;ldquo;at my scale&amp;rdquo; jokes, but seriously, at RestKit&amp;rsquo;s scale, even the little things would need to matter. Because it was a library, and not an app, I didn&amp;rsquo;t even know how many people would be affected if I shipped bugs, but I&amp;rsquo;m pretty sure it would&amp;rsquo;ve been thousands of developers and millions of users. No pressure, right?&lt;/p&gt;

&lt;p&gt;And so I gnawed away at the problem for a few days. I remember needing to do a short presentation, and working on &lt;code&gt;RKValueTransformers&lt;/code&gt; immediately before and after. I&amp;rsquo;d found a problem that grabbed my attention more than any other I&amp;rsquo;d been presented with before. It was incredible to be challenged, to have a sense of purpose that wasn&amp;rsquo;t otherwise readily available.&lt;/p&gt;

&lt;p&gt;I know you might be thing, &amp;ldquo;well Samuel, I&amp;rsquo;ve got enough challenges on my plate right now with this app I&amp;rsquo;m building&amp;hellip;&amp;rdquo;. And that&amp;rsquo;s great! But it takes time to get to work on something of consequence, something that feels like it&amp;rsquo;s being used, a project that challenges you to grow. And, in open source, you don&amp;rsquo;t need to have your credentials accepted by some hiring committee to get started hacking on things.&lt;/p&gt;

&lt;p&gt;Sure, it was a unique point in time where I barely had any other obligations, but there were no more formal barriers. Meeting with Blake wasn&amp;rsquo;t a precursor to me contributing. Nor was living in the same city, country, nor time zone. Nor was my age, my education level, or basically anything that&amp;rsquo;s printed on my resume. I had time, I had a GitHub account, therefore I could contribute.&lt;/p&gt;

&lt;p&gt;As someone with very little experience, I will forever be grateful that Blake took the time to let me bounce ideas off of him. I can point to that single week as the time where I grew into being a capable developer. Not just because because of &lt;em&gt;what&lt;/em&gt; I was building, but working on a project with another developer, a project that would in turn be used by others, made the &lt;em&gt;how&lt;/em&gt; I was working incredibly important. I got to learn how to write tests (something foreign to me until then), how to write documentation, and how to talk about incredibly technical things with someone over the internet.&lt;/p&gt;

&lt;p&gt;All of those are the skills I use literally every day right now. I&amp;rsquo;d go so far as to say they&amp;rsquo;re the essential skills for &lt;em&gt;any&lt;/em&gt; software developer. And I got them in distilled form, right up from, from open source, because it&amp;rsquo;s an environment in which the constraints you&amp;rsquo;re up against are so much tighter than working on an app in your free time, or building yet another social network at &lt;em&gt;insert random startup name here&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;d joined the RestKit core team, and had a newfound confidence in my abilities. I&amp;rsquo;d tackled a problem that made me feel like I had a greater fundamental understanding of how code &lt;em&gt;worked&lt;/em&gt;. That was a pretty incredible feeling, so I kept on doing it &amp;ndash; I wanted more. I got more and more involved in RestKit (where I&amp;rsquo;m the current pull request merger / ignorer).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a tiny detour here, because I want to be honest with you. My open source work is the reason I&amp;rsquo;m here today, in many ways. It&amp;rsquo;s the reason people know me. It&amp;rsquo;s the first way I introduce myself to other developers. It gives me &amp;lsquo;cred&amp;rsquo; with people who don&amp;rsquo;t otherwise know me, but are familiar with the projects I work on. And I&amp;rsquo;m incredibly grateful for that.&lt;/p&gt;

&lt;p&gt;After starting my first year of school at UChicago, I got involved in your typical college startup. It was pretty terrible, but I was building the iOS app and helping out with the backend (of course). I was hungry to find another challenge. Over spring break, after getting my wisdom teeth out, I went to hang out at Artsy for the CocoaPods bug bash. It was the day before heading back to school. I tried making one small fix to the specs, but it was really off-base, and I closed the pull request after a few minutes. Other than that, I had contributed no actual code to CocoaPods, but in trying to track down some of the issues, I learned a bit about CocoaPods worked internally. Even more importantly, however, I’d met Orta, along with chatting with Eloy, Fabio, and Kyle over IRC. It was a fun day, but still, it was no harbinger of the year to come. But it was a start.&lt;/p&gt;

&lt;p&gt;I returned to the University of Chicago to begin spring quarter of my first year (where I currently plan on completing a triple major). While the first week of the quarter was filled with the obligatory reading, writing, and problem sets, I couldn’t help but feel a bit bored. So, I did what every nineteen year old college student does when bored on a Saturday night: &lt;code&gt;git clone &amp;amp;&amp;amp; bundle install &amp;amp;&amp;amp; vim .&lt;/code&gt; . (Ok, maybe that isn’t the typical response, but bear with me.) I decided, in my naivety, to try and rewrite the CocoaPods dependency resolver, because I knew there was an outstanding issue to that effect.&lt;/p&gt;

&lt;p&gt;In that crazy attempt to rewrite such a core part of CocoaPods, I learned so much. First off, that copy-pasting code isn&amp;rsquo;t as helpful as you&amp;rsquo;d like. But more importantly, it was a chance to discover how other people, developers much smarter and more experienced than myself, built things. Sure, it was an incredible hack job, and I&amp;rsquo;m happy it never got merged, but it was a night where I got to explore and expand my horizons as a developer. And isn&amp;rsquo;t that why we&amp;rsquo;re all here, in SF this week? Isn&amp;rsquo;t that why we go to conferences, and listen to talks?&lt;/p&gt;

&lt;p&gt;But for me, open source was a way to do all that without flying across the world, without spending thousands of dollars on tickets and hotel rooms and flights, and without ever stepping foot outside of the library. Working on CocoaPods (and now also Bundler, and ignoring the fact that my day job is &lt;em&gt;also&lt;/em&gt; open source), I&amp;rsquo;m confident in saying that the people I get to work with are a finer bunch than you&amp;rsquo;ll ever find outside of the community.&lt;/p&gt;

&lt;p&gt;I get to work with the most experienced, most talented, and nicest people ever, all in one place. You&amp;rsquo;d never get to work with all of them at once in a job, but since CocoaPods is everyone&amp;rsquo;s hobby, you get this incredible mix of people. I&amp;rsquo;m humbled every day to wake up, see my GitHub and Slack notifications from the rest of the team, and be able to say, I&amp;rsquo;m a part of that.&lt;/p&gt;

&lt;p&gt;Compared to a few years ago, everything&amp;rsquo;s looking up. I love open source, but I love even more the person it&amp;rsquo;s helped me to become. I&amp;rsquo;ve found a way into this world, and it&amp;rsquo;s now a place I belong. I wrote a blog post a few weeks ago that tackled the more personal side of this story, and the summary is: in a very short time, I&amp;rsquo;ve grown up. Both personally and professionally. And the open source world is intertwined in that story.&lt;/p&gt;

&lt;p&gt;So thank you so much for listening to me ramble about how I basically owe my career to open source. It&amp;rsquo;s drastically changed my life (mostly for the better), and taught me more than I could&amp;rsquo;ve ever dreamed, both about coding, being a software developer, and being a human being on the internet. I know that open source, like everything else, isn&amp;rsquo;t perfect and has its faults, but it&amp;rsquo;s a hell of a place to be.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I'm Twenty</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/05/26/im-twenty/"/>
    <id>http://blog.segiddins.me/2015/05/26/im-twenty/</id>
    <published>2015-05-26T17:00:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I know it might come as a shock, but I&amp;rsquo;m actually twenty years old. This is a fact that I do my best to ignore most of the time, but the past week has shown me there&amp;rsquo;s been a cost to that. You see, a typical twenty year old is in college, probably working a job on campus in between attending lectures, inviting themselves to parties, and doing countless hours of homework. That life was certainly a lot more familiar to me at nineteen, before I took a year&amp;rsquo;s leave of absence to work full-time in San Fransisco. Eight months into my tenure in San Fransisco, and eleven months after I drove away from my dorm at the end of my first year at UChicago, I&amp;rsquo;m ready to take stock of what, exactly, this experience has done to me.&lt;/p&gt;



&lt;p&gt;When I drove East from Burton-Judson last June Thirteenth, I was clearly a changed person from the one would moved into college housing a mere nine months earlier. For one, I was a hell of lot better educated, having been able to stretch my academic muscle far better than was ever possible in high school. But beyond the question of academics, things were a lot murkier. I&amp;rsquo;d spent my first year away from home, but I&amp;rsquo;d done so in a veritable pressure cooker, where students took pride in spending more hours in the library than anyone else. I also hadn&amp;rsquo;t taken well the notion that an entire academic quarter was devoted to being locked up, trapped by a bitter and cruel Chicago winter. Instead of relishing the opportunities of youth, I was embittered by the follies of a young adult who was convinced beyond a shadow of a doubt that he had absolutely no growing up left to do. In retrospect, I can see how stupid that was.&lt;/p&gt;

&lt;p&gt;I was a stranger to serious romantic relationships, my last one ending at the start of my sophomore year of high school. I substituted intimacy with hard work on open-source projects, and soured towards those who were ensconced in happy partnerships. I had friends, sure, but in deficient quantities both throughout high school and in college. There were always the stalwarts, sure, but I found myself often frustrated that I couldn&amp;rsquo;t make plans when I wanted to. I was also reluctant to commit myself to any sort of group membership, for some reason or another. And thus I felt very lonely. I still do, in some respects, but as I shall describe later on, those sorts of emotions have morphed to be something far less destabilizing than they once were.&lt;/p&gt;

&lt;p&gt;The duo of working my ass off for many years in a row, without any serious respite (I was also quite studious in high school, probably much more so than was strictly necessary) and the bout of intense loneliness no doubt spurred on by the distance from any family caused the most intense sensation of burnout and frustration that I&amp;rsquo;ve ever experienced, and it didn&amp;rsquo;t go away. No success was sufficient to buoy my spirits, and every temporary setback made me feel even more distant from everyone around me. Even though I was in college, I was incapable of having &lt;em&gt;fun&lt;/em&gt; for more than a few hours at a time, and even then it usually required a fair dose of alcohol and some coaxing to &lt;em&gt;loosen up for once&lt;/em&gt;. Even as my career began in earnest, and I rose to prominence through open source projects such as RestKit and CocoaPods, and landed an internship on the incredible Tumblr iOS team, none of that made me happy. There were scant minutes of celebration, always followed immediately by a nagging feeling of &lt;em&gt;what&amp;rsquo;s next&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I confided in some developer friends that I thought I needed a break. I couldn&amp;rsquo;t imagine another nineteen years where I was struggling so hard to find a baseline level of contentment. I couldn&amp;rsquo;t find respite, much less happiness &amp;ndash; I was just too jaded. And let me tell you something &amp;ndash; you don&amp;rsquo;t want to feel jaded at nineteen. So I harbored a desire to somehow take some time off, but I knew deep down that it was a pipe dream. My dad would certainly not approve of me leaving university, and I had no where really to go for &lt;em&gt;any&lt;/em&gt; period of time that could possibly be construed as a constructive use of my prime years. And then Elóy told me about Stripe&amp;rsquo;s open source retreat, and there was a concrete port towards which I could dream of anchoring my desires. As I&amp;rsquo;ve written more than once before, I has nearly certain that my application wouldn&amp;rsquo;t be accepted, but it was a solid opportunity that had clearly explainable benefits, and wouldn&amp;rsquo;t sully the image I was trying to project about my trajectory in life. It wasn&amp;rsquo;t a break from college, I could say, but an opportunity to do something even better before returning for a year! I&amp;rsquo;m not sure I really believed that, but I was convincing. It also turns out that I was right.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I left my first year of college disappointed in my lack of progress. I was nine months older, twelve classes wiser, and yet I felt like I&amp;rsquo;d barely been treading water for that time. Where was the immense growth that was supposed to come at this crucial juncture in my young life? Was I not on the bridge that picked my up on the rocky beaches of adolescence and safely delivered me to the sandy beaches of adulthood? Apparently not. I&amp;rsquo;d had a short fling at the end of the year, but apart from that I hadn&amp;rsquo;t engaged in any other relationships. I&amp;rsquo;d made friends, even confided in them, but that wasn&amp;rsquo;t enough. I barely slept, and had trouble keeping my eyes open during classes, even when I desperately wanted to. I had holed up in my room too many nights to count, putting off doing work, and then feeling absolutely miserable with myself for my inability to be productive. It was probably worse than in high school, although it&amp;rsquo;s quite honestly hard to say, given the myriad differences, such as lack of parental influence and also much more flexibility with which I could slack off. I was binge-eating more than ever, I was running much less than before (both of which are, of course, partially attributable to winter). Things flat out were not getting better.&lt;/p&gt;

&lt;p&gt;And so I relished the chance to take a break, to back off and give myself a chance to finally reset. I&amp;rsquo;d been in high gear since late in elementary school, and the cracks were beginning to show. I not only wasn&amp;rsquo;t growing up, but rather I was exacerbating every existing bad tendency. I remain convinced that continued, uninterrupted application of that college strain would&amp;rsquo;ve caused me to finally crack before I managed to graduate. I even strove to complete three majors, sure that it offered a way for me to be content with my time in college. So much for maturing, right?&lt;/p&gt;

&lt;p&gt;And, after my rather uneventful summer at Tumblr, in which I worked 40 hour weeks and didn&amp;rsquo;t need to push myself too hard, I packed up my life and moved out to San Francisco. I was going to live in my own apartment, and work my own job, and generally speaking take things easy. I was scared that I would become listless without the directed goals of school to guide me &amp;ndash; after all, my life had been governed by school in one form another since I was approximately two years old &amp;ndash; school life was basically all I knew. So this was going to be something different.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Let me make one thing incredibly clear &amp;ndash; this year has probably been the single best thing I&amp;rsquo;ve ever done for myself. The Samuel that&amp;rsquo;s writing this while flying back to San Fransisco after a speaking trip that included six days in Hyde Park, blocks away from my dorm, is not the one that drove off last June &amp;ndash; he&amp;rsquo;s not even the same Samuel that made a Halloween visit and came away disappointed. I unequivocally believe that I, the Samuel that&amp;rsquo;s writing these very words, has finally grown up and made good on all the things I&amp;rsquo;ve wanted to promise myself &amp;ndash; not in material things, necessarily, but rather in the fact that I&amp;rsquo;m finally taking care of myself.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t to say that I&amp;rsquo;m suddenly a wizened, ornery old man, but rather a proper adult &amp;ndash; a human being capable of self-sustenance in mind, body, and spirit. I have an incredibly fulfilling job that I work at about forty hours a week, and I help lead two open source projects that have a hand in vast swaths of the project I personally use on a daily basis existing. And damn if I&amp;rsquo;m not proud of all of it. I also take the time to cook dinner a couple of times a week, and even annoyingly tweet about it every time I do, because I&amp;rsquo;m proud of what I&amp;rsquo;m doing. I&amp;rsquo;m back to reading prodigiously (my current focus is on esoteric history books). I go to the symphony two or three times a week &amp;ndash; I even took a friend there on a date a few weeks ago!&lt;/p&gt;

&lt;p&gt;I sleep almost eight hours every night, I don&amp;rsquo;t fall asleep at my desk, and I don&amp;rsquo;t feel jealous every time one of my coworkers succeeds. I&amp;rsquo;ve lost weight, I walk to work every day, and even try and fit in a ten mile hike through the city once a week. Before leaving my apartment last Monday, I took a look at myself in the mirror and couldn&amp;rsquo;t help but smile &amp;ndash; I felt content with what I saw, with who I am.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I didn&amp;rsquo;t really realize all of this progress that I&amp;rsquo;ve made in the past year until I took this trip, and spent some real time back at school.&lt;/p&gt;

&lt;p&gt;Being on a college campus when you&amp;rsquo;re a &lt;em&gt;former&lt;/em&gt; student may be one of the strangest experiences I&amp;rsquo;ve ever had. It&amp;rsquo;s almost like nothing around you has changed. People are taking the same classes as always. There are the same eternal college dramas unfolding. And while my friends were a year older, they too appeared unchanged. Some of them are a mere three weeks from graduation, but they&amp;rsquo;re still certainly college students. And now I can properly recognize how much &lt;em&gt;I&amp;rsquo;ve&lt;/em&gt; changed in this year.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not that I&amp;rsquo;ve become distant from my friends, since we&amp;rsquo;ve certainly stayed in touch. But all of the anxiety that is so clearly prevalent from their lives is now absent from mine. The anxiety and drama and fear that used to be paralytic just isn&amp;rsquo;t inhibiting me any more. I&amp;rsquo;m more confident than I&amp;rsquo;ve ever been, and more content with the trajectory my life has taken. Sure, I still have lots of things that I&amp;rsquo;d love to improve, but now I&amp;rsquo;m optimistic that I can get there. There&amp;rsquo;s no weight or raincloud hovering over me, casting aspersions on my every move. All that&amp;rsquo;s just gone.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t have realized this without returning to my old (and soon to be future) life, and taking a step back to ask what&amp;rsquo;s different. &amp;ldquo;It&amp;rsquo;s not you, it&amp;rsquo;s me&amp;rdquo; is a stereotypical breakup line, but in asking myself what had changed, it was the only conclusion I could draw. The thing that had changed was me.  And going to parties and grabbing coffees with my friends, I was finally able to &lt;em&gt;delight&lt;/em&gt; in the fact that I&amp;rsquo;m twenty. It&amp;rsquo;s an age of fun and discovery, after all! And now I&amp;rsquo;m equipped to enjoy it. (I decided to start by going to three parties consecutively this weekend, about which I have zero regrets.)&lt;/p&gt;

&lt;p&gt;On Friday night, I went with my housemates to the BJ Scav party, well-regarded as one of the best parties of the year. I was, of course, rather drunk, but I can still remember the entire night. I found myself in the kitchen, by the drinks, and somehow struck up a conversation with a girl I vaguely knew. Through some turn of events, the conversation meandered to the topic of her tattoo, which said &amp;ldquo;All Was Well&amp;rdquo; &amp;ndash; of course, the final words of the Harry Potter series. As she was explaining why she chose those words, I was granted some perspective on my own life &amp;ndash; they represent that, no matter what comes next, after everything that&amp;rsquo;s happened in the past, we&amp;rsquo;re at a point where we can be &lt;em&gt;truly content&lt;/em&gt;. And that&amp;rsquo;s where I am right now in life. &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;rsquo;m returning to UChicago in September, and I&amp;rsquo;m going to continue living on my own. But now, I know I&amp;rsquo;m ready. Ready not just to finish college and get a degree, but also ready to finally explore the world as an adult. As someone who&amp;rsquo;s willing to have their eyes opened, and as someone unencumbered by the baggage of youth.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still twenty, which is of course, only one year older than nineteen. But I know I&amp;rsquo;ve undergone a disproportionate amount of growth in the past year. I&amp;rsquo;ve grown up in exactly the ways I had always hoped college would help me mature. Even though I still can&amp;rsquo;t order myself a beer in my home country, I&amp;rsquo;m an adult now.&lt;/p&gt;

&lt;p&gt;And I couldn&amp;rsquo;t be prouder of myself or any happier. At last, I can say, without a trace of irony, &lt;em&gt;All Is Well&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>1 Year of CocoaPods</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/04/13/1-year-of-cocoapods/"/>
    <id>http://blog.segiddins.me/2015/04/13/1-year-of-cocoapods/</id>
    <published>2015-04-13T17:30:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A year ago today, I made my first serious attempt at contributing to CocoaPods. Little would I know that a late Saturday night (that quickly turned into Sunday morning after I returned from a party) spent hacking on some Ruby would forever change the course of history. Well, maybe not &lt;em&gt;history&lt;/em&gt;, but certainly my own story, and that of CocoaPods.&lt;/p&gt;



&lt;p&gt;I’ve been a &lt;a href="https://cocoapods.org"&gt;CocoaPods&lt;/a&gt; user since the spring of 2013, my &lt;a href="https://github.com/segiddins/RandomRainbow"&gt;formative days as an iOS developer&lt;/a&gt;, before I even knew how to write a coherent program in Ruby. I couldn’t tell you who had written CocoaPods, whether it was sponsored by a corporation, or whether it would be around in a year, but from day 1 I was heavily indebted to it. I wouldn&amp;rsquo;t hesitate to say that, without CocoaPods, I could not have made it as an iOS developer.&lt;/p&gt;

&lt;p&gt;The first time I was ever forced to consider the idea that CocoaPods was a concrete thing, a human production, was when I saw the announcement on the CocoaPods blog of the &lt;a href="http://blog.cocoapods.org/CocoaPods-Bug-Bash/"&gt;Bug Bash&lt;/a&gt;. It was set for my last day of my very first college spring break, but I didn’t have anything better to do (I had been sidelined by two removed wisdom teeth earlier in the week), so I hopped on Metro North towards Manhattan, and Artsy HQ.&lt;/p&gt;

&lt;p&gt;Not knowing whom I would meet, I took the elevator up to the 27th floor, and was promptly greeted by &lt;a href="https://twitter.com/orta"&gt;Orta&lt;/a&gt;. I sat down next to maybe five or six other people, and proceeded to triage issues. If memory serves, I had attended to the second-most issues that weekend, after &lt;a href="https://twitter.com/neonacho"&gt;Boris&lt;/a&gt; (hence his nickname, the &lt;a href="https://cocoapods.org/about#team"&gt;Triagemaster General&lt;/a&gt;). I tried making &lt;a href="https://github.com/CocoaPods/CocoaPods/pull/1948"&gt;one small fix to the specs&lt;/a&gt;, but it was really off-base, and I closed the pull request after a few minutes. Other than that, I had contributed no actual code to CocoaPods, but in trying to track down some of the issues, I learned a bit about CocoaPods worked internally. Even more importantly, however, I’d met Orta, along with chatting with &lt;a href="https://twitter.com/alloy"&gt;Eloy&lt;/a&gt;, Fabio, and &lt;a href="https://twitter.com/kylefuller"&gt;Kyle&lt;/a&gt; over IRC. It was a fun day, but still, it was no harbinger of the year to come. But it was a start.&lt;/p&gt;

&lt;p&gt;I returned to the University of Chicago to begin spring quarter of my first year (where I currently plan on completing a triple major). While the first week of the quarter was filled with the obligatory reading, writing, and problem sets, I couldn&amp;rsquo;t help but feel a bit bored. So, I did what every nineteen year old college student does when bored on a Saturday night: &lt;code&gt;git clone &amp;amp;&amp;amp; bundle install &amp;amp;&amp;amp; vim .&lt;/code&gt;. (Ok, maybe that isn’t the typical response, but bear with me.) I decided, in my naivety, to try and rewrite the CocoaPods dependency resolver, because I knew there was an outstanding issue to that effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/CocoaPods/CocoaPods/pull/2039"&gt;That first PR&lt;/a&gt; seemed to get peoples’ attention. I had blindly copy-pasted most of the code from Bundler’s old resolver, but I had some of the basic CocoaPods specs passing. I also got 100 comments from HoundCI, complaining (rather prematurely) about code style. Right after that, I started to seriously talk with Fabio and Eloy about what would be needed to clean up that work and get it mergeable. Days of conversation ensued, in which I didn’t make any progress on the resolver, but I did manage to sneak in about a PR a day doing small things around the different CocoaPods repos. After a couple weeks of that, I had become a member of the &lt;a href="https://cocoapods.org/about#team"&gt;core team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the end of April, Eloy pointed me towards &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;Stripe’s announcement of their open source retreat&lt;/a&gt;. I’d been working on CocoaPods less than a month, but I was the member of the team most able to drop everything and move to San Fransisco. We had no idea what my proposal would actually promise, but I began to seriously consider taking the plunge and working on CocoaPods full-time. It took a full month to convince my dad to let me take a year off, but I convinced him just before flying out to SF for &lt;a href="http://www.rubymotion.com/news/2014/07/02/rubymotion-inspect-2014-wrap-up.html"&gt;RubyMotion#inspect&lt;/a&gt; (and to meet the majority of the CocoaPods team). In between talks, Eloy and I polished up my proposal, and narrowed it down to one point: a new dependency resolver, potentially to be shared with bundler. And so I submitted the proposal right when I got back to school on May 30. (I took a redeye back and accidentally slept through both my classes that day. Oops.) I wasn’t sure what to expect. On one hand, I was affiliated with a relatively well-known project that had traction in the community. But on the other hand, I was a relative unknown, a random college student with no real track record of open source leadership.&lt;/p&gt;

&lt;p&gt;On June 3, 1:22 AM Chicago time, I heard back from Greg Brockman &amp;ndash; I was a finalist. He wanted to schedule a Skype call for later that day. We chatted for about half an hour, and I felt like I hadn’t made a total fool of myself. I settled back into nervous waiting. That night, at 7:07 PM, I had my response:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey Samuel,&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re in!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so a new chapter of my CocoaPods career began: &lt;a href="https://stripe.com/blog/open-source-retreat-grantees"&gt;I was the soon-to-be grantee&lt;/a&gt;. The night I found out happened to be the night before my last day of classes for the year, so after telling everyone and anyone I could call, I celebrated a bit in between juggling my final assignments and my last analysis p-set. I then had to go about preparing to take a year’s leave of absence while also writing papers and studying for finals (and eventually breaking up with my girlfriend).&lt;/p&gt;

&lt;p&gt;Over the summer, I was an intern on the iOS team at Tumblr. While I was using CocoaPods on a daily basis at work, development on the tool itself had ground to a halt, both from me and everyone else. I managed to get in the odd pull request or two after work, but I didn’t focus much time on CocoaPods development. That all changed the day I moved to California, September 4th. I had one weekend to acclimate myself (and find an apartment) before starting the three-month retreat at Stripe.&lt;/p&gt;

&lt;p&gt;My first day at Stripe was spent triaging upwards of 200 issues, which was an exhausting, yet incredibly productive way to start. On day two, I dug into my work on the dependency resolution algorithm. Later that week, Eloy, Kyle, and myself started to pull together the initial 0.34 release, which was a day-long Herculean effort. At the end of it, though, I finally felt like I belonged on the CocoaPods team.&lt;/p&gt;

&lt;p&gt;So I hunkered down to work on the resolver, along with general CocoaPods improvements, for a solid month and a half. Other than a little fire I had to put out while sitting in SFO, things went very smoothly. &lt;a href="https://github.com/CocoaPods/Molinillo"&gt;Molinillo&lt;/a&gt; was born and integrated into CocoaPods, tests were written, and &lt;a href="https://github.com/CocoaPods/CocoaPods/pull/2637"&gt;my integration PR&lt;/a&gt; was merged. The &lt;code&gt;segiddins&lt;/code&gt; release was a go.&lt;/p&gt;

&lt;p&gt;Since Stripe, I’ve been working at &lt;a href="http://realm.io"&gt;Realm&lt;/a&gt;. But I’ve also been writing a bunch of CocoaPods code, as well as diving head-first into both &lt;a href="https://github.com/bundler/bundler"&gt;Bundler&lt;/a&gt; and &lt;a href="https://github.com/RubyGems/RubyGems"&gt;RubyGems&lt;/a&gt;, spearheaded by Molinillo. I helped review Marius’ work bringing framework (and Swift) support to CocoaPods, along with prodding along the 0.36 release process. I built pod downloading caching and concurrent pod downloads. I’ve fixed a bunch of bugs (and introduced more than I’m proud to admit).&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;So, what does the future hold for me and CocoaPods? Right now, I don’t foresee any changes in the near future. I’ll continue working on some big stuff (the new &lt;code&gt;Podfile&lt;/code&gt; DSL comes to mind), and hacking on things behind the scenes. I couldn&amp;rsquo;t imagine not working on CocoaPods now. It’s become a huge part of my life, both professionally and personally, and I’d miss it dearly if I weren’t committing to it every week.&lt;/p&gt;

&lt;p&gt;Pod on.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My Problem With Twitter</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/02/12/my-problem-with-twitter/"/>
    <id>http://blog.segiddins.me/2015/02/12/my-problem-with-twitter/</id>
    <published>2015-02-12T17:00:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been seriously using Twitter for a bit over a year. When the service first came out, I thought it was silly &amp;ndash; why would I care what celebrities ate for lunch? Of course, that just meant that I didn’t understand the service, like so many others.&lt;/p&gt;

&lt;p&gt;In 2013, I got myself an account on &lt;a href="https://app.net"&gt;app.net&lt;/a&gt; because it was all the rage (and every podcast I listened to kept on singing its praises). None of my High School friends were on it, but I followed some people from the tech world. I even had a few conversations with &lt;a href="http://donmelton.com"&gt;Don Melton&lt;/a&gt; on ADN. After a while, I let that account lie fallow &amp;ndash; I had lost interest.&lt;/p&gt;

&lt;p&gt;Fast forward a few months to December 2014. I had just finished my first quarter of college. I was starting to take myself seriously as an iOS developer. And I, for reasons I cannot recall, started using Twitter. At first, I followed the same people I followed elsewhere on the internet. But after a while, I started to feel like I knew some of the people I was communicating with &amp;ndash; that I was one of them.&lt;/p&gt;

&lt;p&gt;That’s all well and good, but the problem is that the sort of relationship that Twitter fosters is asymmetrical. I can follow and engage with and look up to people who barely know I exist. I can see hundreds of people sharing the best moments of their lives, while I’m sitting alone on the couch in my apartment watching Netflix. My timeline gets filled with people I think I know, talking, and I can’t help but feel left out.&lt;/p&gt;

&lt;p&gt;Sure, I have &lt;em&gt;real&lt;/em&gt; friends on Twitter as well, but I’d say more than 80% of the people I interact with on the service are ‘internet friends’ or ‘internet celebrities’. You know what really knocks the wind out of your sails? When there’s someone you look up to, and you meet, and then they &lt;em&gt;don’t&lt;/em&gt; follow you on Twitter. It just screams “I don’t want to see what you have to say”. But it’s not really their fault. It’s Twitter’s. It’s mine.&lt;/p&gt;

&lt;p&gt;And there’s my problem with Twitter. It enables me to feel &lt;em&gt;terrible&lt;/em&gt; about myself for &lt;em&gt;absolutely no good reason&lt;/em&gt; &lt;strong&gt;every day&lt;/strong&gt;. Talking with people on Twitter is almost like negative social interaction &amp;ndash; it leaves you feeling more lonely than you started. And that sucks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dynamic Casting in Swift</title>
    <link rel="alternate" href="http://blog.segiddins.me/2015/01/25/dynamic-casting-in-swift/"/>
    <id>http://blog.segiddins.me/2015/01/25/dynamic-casting-in-swift/</id>
    <published>2015-01-25T19:30:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We’ve been spoiled by Objective-C’s runtime flexibility. Its tendency for dynamic dispatch, as well as a very powerful runtime (that’s exposed via both Objective-C and C APIs) has meant that dealing with arbitrary data was an easy task. You just check &lt;code&gt;[object isKindOfClass:klass]&lt;/code&gt; and accept &lt;code&gt;id&lt;/code&gt; parameters and everything works as expected.&lt;/p&gt;

&lt;p&gt;In Swift, however, we have a statically-typed language where the compiler really needs us to know types at compile-time, rather than runtime. In general, this helps us write safer code than was possible in Objective-C, but makes dealing with data this is &lt;em&gt;fundamentally untyped&lt;/em&gt; a real challenge. Swift has two operators that help to bridge the gap between static safety and the power of dynamicism: &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;It might help to pretend that those two operators are functions, so here are their function signatures:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first operator, &lt;code&gt;as&lt;/code&gt;, lets us give an object of type &lt;code&gt;T&lt;/code&gt; and tell the compiler, &amp;lsquo;no, at runtime this &lt;em&gt;really&lt;/em&gt; will be a &lt;code&gt;U&lt;/code&gt;&amp;rsquo;. This is really handy when dealing with Objective-C methods that return &lt;code&gt;id&lt;/code&gt; or Swift functions that return &lt;code&gt;AnyObject&lt;/code&gt;, but the programmer knows at compile time what their &lt;em&gt;real&lt;/em&gt; type will be.&lt;/p&gt;

&lt;p&gt;The second operator, &lt;code&gt;as?&lt;/code&gt;, is probably the more interesting of the two. &lt;code&gt;as?&lt;/code&gt; lets us write &lt;em&gt;dynamic, conditional&lt;/em&gt; code that is truly native to the static Swift world. &lt;code&gt;as?&lt;/code&gt; allows us to tell the compiler, ‘I don’t really know what this object will be at runtime, but if it happens to be of type &lt;code&gt;U&lt;/code&gt;, I want it as a type-safe object of that type. Otherwise, I’ll take &lt;code&gt;nil&lt;/code&gt;.’ This is super powerful. Imagine that we’re writing an application that consumes a REST API. The data that API returns is &lt;em&gt;fundamentally untyped&lt;/em&gt; since the compiler has absolutely no visibility into the type of data it can return. We’re interested in pulling out a &lt;code&gt;count&lt;/code&gt; property from that API response, but the &lt;code&gt;count&lt;/code&gt; property on our model needs to be of type &lt;code&gt;Int&lt;/code&gt; &amp;ndash; how do we bridge that gap? Enter &lt;code&gt;as?&lt;/code&gt;. We want to take the response’s &lt;code&gt;count&lt;/code&gt; as an &lt;code&gt;Int&lt;/code&gt;, but only if it really &lt;em&gt;is&lt;/em&gt; an &lt;code&gt;Int&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="c1"&gt;// count: Int?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can even define some syntactic sugar on top of this type verification:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;typed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;U&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;typed&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can just write:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, that last example might not look like a huge improvement, but coupled with Swift&amp;rsquo;s powerful type inference, you can &amp;#39;magically&amp;rsquo; &lt;code&gt;type&lt;/code&gt; objects at runtime with a single function call.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;id&lt;/code&gt; function can be used when passing the extracted value into a typed function:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;doubleMaybe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note that we don't have to explicitly cast to Int?&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;doubleCount2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;doubleMaybe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the best of both worlds: the ability to dynamically handle data that is out of our control, and being able to do so in a convenient way that is perfectly type-safe.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nota bene&lt;/em&gt;: So, we have these two operators that look to be &lt;em&gt;basically&lt;/em&gt; the same &amp;ndash; they only differ by one letter, after all. What’s the difference between them? Turns out, the difference is &lt;em&gt;massive&lt;/em&gt;. If we do &lt;code&gt;x as? U&lt;/code&gt;, our program (presuming it compiles) will &lt;em&gt;never&lt;/em&gt; crash &amp;ndash; you’ll get back &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is not a subtype of &lt;code&gt;U&lt;/code&gt;. On the other hand, &lt;code&gt;x as U?&lt;/code&gt; (or &lt;code&gt;x as U&lt;/code&gt;) will cause our program to segfault if &lt;code&gt;x&lt;/code&gt; is anything other than a subtype of &lt;code&gt;U?&lt;/code&gt;(or &lt;code&gt;U&lt;/code&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thanks Again, Stripe!</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/12/05/thanks-again-stripe/"/>
    <id>http://blog.segiddins.me/2014/12/05/thanks-again-stripe/</id>
    <published>2014-12-06T02:30:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today marks my last day at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;, where I’ve been working for the past three months on their &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;open source retreat&lt;/a&gt;. It’s hard to believe that it’s been a whole three months. I’ve literally never worked this long in one place before.&lt;/p&gt;



&lt;p&gt;On my first day, I had been living in California for less than a week. I knew no one who worked here, and my plans consisted of fulfilling a grant proposal. Three months later, I’ve accomplished everything I said I would: I’ve written a new &lt;a href="https://github.com/CocoaPods/Molinillo"&gt;dependency resolver&lt;/a&gt; for &lt;a href="http://cocoapods.org/"&gt;CocoaPods&lt;/a&gt;, a &lt;a href="https://github.com/CocoaPods/Resolver-Integration-Specs"&gt;language-agnostic test suite&lt;/a&gt;, and a &lt;a href="https://github.com/bundler/bundler/pull/3257"&gt;working port&lt;/a&gt; of my resolver (named Molinillo) to &lt;a href="http://bundler.io/"&gt;bundler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve also had an incredible time working out of Stripe’s office: they’ve fed me, provided excellent company, and have shown me that even big companies can have spirit and be fun places. I’ve met amazing people working here, people who have been gracious enough to share their wisdom over coffee runs and meals in the cafeteria.&lt;/p&gt;

&lt;p&gt;I have no words for how grateful I am that Stripe granted me this opportunity. Without them, I would never have been able to move to San Fransisco and live out my dream of being a professional open source developer.&lt;/p&gt;

&lt;p&gt;I must also thank my fellow CocoaPods core contributors for both encouraging me to apply for the retreat, and also helping me with my work here every step of the way.&lt;/p&gt;

&lt;p&gt;Sure, Thanksgiving might have been a week ago, but I really do want to give thanks for this once-in-a-lifetime opportunity. It was a great three months.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Realm</title>
    <link rel="alternate" href="http://blog.segiddins.me/2014/12/02/realm/"/>
    <id>http://blog.segiddins.me/2014/12/02/realm/</id>
    <published>2014-12-02T20:27:00+00:00</published>
    <updated>2016-09-16T13:56:51+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I am so incredibly happy to announce today that I will be joining the fine folks at &lt;a href="http://realm.io"&gt;Realm&lt;/a&gt; starting on Monday. I’ll be working on building cool things there—&lt;a href="http://cocoapods.org"&gt;CocoaPods&lt;/a&gt;, &lt;a href="https://github.com/realm/jazzy"&gt;jazzy&lt;/a&gt;, and &lt;a href="https://github.com/RestKit/RestKit"&gt;RestKit&lt;/a&gt;, along with working on Realm, the database, itself.&lt;/p&gt;



&lt;p&gt;I’ve spent the past three months at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;, working full-time on CocoaPods thanks to their amazing &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;open source retreat&lt;/a&gt;. In doing so, I’ve discovered a few things. I love working on open source tooling—it’s maybe the most fun type of problem I’ve ever tried to tackle. I also miss working in the same room as my coworkers. At Realm, I get the best of both worlds: working on an amazing open source product with an incredible, world-class team.&lt;/p&gt;

&lt;p&gt;I’m going to continue working on the projects I already contribute to, and I’m sure there’ll be new projects soon enough. Realm is building some incredible technology, and I have no worries that it’ll be an interesting product to work on.&lt;/p&gt;

&lt;p&gt;I’m sad to say goodbye to Stripe. They’ve fed me well and I’ve made many wonderful friends there, but I couldn&amp;rsquo;t be more excited to begin the next period of my life at Realm.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Excelsior.&lt;/em&gt; Things just keep getting better.&lt;/p&gt;
</content>
  </entry>
</feed>
